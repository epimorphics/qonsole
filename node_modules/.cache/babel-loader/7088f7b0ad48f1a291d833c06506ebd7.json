{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1593619799994},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IENvZGVFZGl0b3IgZnJvbSAnLi9Db2RlLUVkaXRvci52dWUnOwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJzsKaW1wb3J0IE91dHB1dCBmcm9tICcuL091dHB1dC52dWUnOwppbXBvcnQgeyBtYWtlUXVlcnksIHNlbmRRdWVyeSB9IGZyb20gJ0AvcXVlcnkuanMnOwppbXBvcnQgc3RvcmUgZnJvbSAnQC9zdG9yZS5qcyc7CmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1NQQVJRTEVkaXRvcicsCiAgY29tcG9uZW50czogewogICAgQ29kZUVkaXRvcjogQ29kZUVkaXRvciwKICAgIEJ1dHRvbnM6IEJ1dHRvbnMsCiAgICBPdXRwdXQ6IE91dHB1dAogIH0sCiAgc3RvcmU6IHN0b3JlLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsYW5ndWFnZTogJ3NwYXJxbCcsCiAgICAgIGVuZHBvaW50OiAnaHR0cDovL2RicGVkaWEub3JnL3NwYXJxbCcsCiAgICAgIHJlc3VsdFR5cGVzOiB7CiAgICAgICAgb3B0aW9uczogWydKU09OJ10sCiAgICAgICAgc2VsZWN0ZWRPcHRpb246ICdKU09OJwogICAgICB9LAogICAgICBmaWxlOiBudWxsCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgYnV0dG9uQ2xpY2tlZDogZnVuY3Rpb24gYnV0dG9uQ2xpY2tlZChidXR0b24pIHsKICAgICAgc3dpdGNoIChidXR0b24pIHsKICAgICAgICBjYXNlICJDbGVhciI6CiAgICAgICAgICB0aGlzLiRyZWZzLmNvZGVFZGl0b3IuY2xlYXJFZGl0b3IoKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJQZXJmb3JtIFF1ZXJ5IjoKICAgICAgICAgIC8vIEdldCBjb2RlIGZyb20gY29kZSBtaXJyb3IgCiAgICAgICAgICAvLyB0aGlzLiRyZWZzLmNvZGVFZGl0b3Iuc2VuZENvbnRlbnQoKTsgCiAgICAgICAgICAvLyBTZW5kIFNQQVJRTCBxdWVyeSB0byBTUEFSUUwgZW5kcG9pbnQgd2l0aCB0aGUgdXNlciBkZWNpZGVkIG91dHB1dCBmb3JtYXQKICAgICAgICAgIHZhciBxdWVyeVVSTCA9IG1ha2VRdWVyeSh0aGlzLiRzdG9yZS5nZXR0ZXJzLlNQQVJRTENvZGUsIHRoaXMuZW5kcG9pbnQsIHRoaXMucmVzdWx0VHlwZXMuc2VsZWN0ZWRPcHRpb24pOwogICAgICAgICAgdmFyIHJhd1Jlc3BvbnNlID0gc2VuZFF1ZXJ5KHF1ZXJ5VVJMKTsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZUpTT05SZXNwb25zZScsIEpTT04ucGFyc2UocmF3UmVzcG9uc2UpKTsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdjaGFuZ2VFcnJvcicsIGZhbHNlKTsKICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnY2hhbmdlRXJyb3InLCB0cnVlKTsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVFcnJvck1lc3NhZ2UnLCByYXdSZXNwb25zZSk7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgIlNhdmUgUXVlcnkiOgogICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbdGhpcy4kc3RvcmUuZ2V0dGVycy5TUEFSUUxDb2RlXSwgewogICAgICAgICAgICB0eXBlOiAidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04IgogICAgICAgICAgfSk7CiAgICAgICAgICBzYXZlQXMoYmxvYiwgJ3F1ZXJ5LnR4dCcpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0sCiAgICBsb2FkVGV4dEZyb21GaWxlOiBmdW5jdGlvbiBsb2FkVGV4dEZyb21GaWxlKGV2KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZmlsZSA9IGV2LnRhcmdldC5maWxlc1swXTsKICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gX3RoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlU1BBUlFMQ29kZScsIGUudGFyZ2V0LnJlc3VsdCk7CiAgICAgIH07CgogICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZUN1cnJlbnRMYW5ndWFnZScsIHRoaXMubGFuZ3VhZ2UpOwogIH0KfTs="},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAmBA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,OAAA,MAAA,eAAA;AACA,OAAA,MAAA,MAAA,cAAA;AACA,SAAA,SAAA,EAAA,SAAA,QAAA,YAAA;AACA,OAAA,KAAA,MAAA,YAAA;AACA,SAAA,MAAA,QAAA,YAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,MAAA,EAAA;AAHA,GAFA;AAOA,EAAA,KAAA,EAAA,KAPA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,QAAA,EAAA,2BAFA;AAGA,MAAA,WAAA,EAAA;AAAA,QAAA,OAAA,EAAA,CAAA,MAAA,CAAA;AACA,QAAA,cAAA,EAAA;AADA,OAHA;AAKA,MAAA,IAAA,EAAA;AALA,KAAA;AAOA,GAhBA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,MADA,EACA;AACA,cAAA,MAAA;AACA,aAAA,OAAA;AACA,eAAA,KAAA,CAAA,UAAA,CAAA,WAAA;AACA;;AACA,aAAA,eAAA;AACA;AACA;AACA;AACA,cAAA,QAAA,GAAA,SAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,EAAA,KAAA,QAAA,EAAA,KAAA,WAAA,CAAA,cAAA,CAAA;AACA,cAAA,WAAA,GAAA,SAAA,CAAA,QAAA,CAAA;;AACA,cAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,EAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA;AACA,WAHA,CAGA,OAAA,KAAA,EAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,IAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,EAAA,WAAA;AACA;;AACA;;AACA,aAAA,YAAA;AACA,cAAA,IAAA,GAAA,IAAA,IAAA,CAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA,CAAA;AACA,UAAA,MAAA,CAAA,IAAA,EAAA,WAAA,CAAA;AACA;AArBA;AAuBA,KAzBA;AA0BA,IAAA,gBAAA,EAAA,0BAAA,EAAA,EAAA;AAAA;;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,UAAA,MAAA,GAAA,IAAA,UAAA,EAAA;;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,UAAA,CAAA;AAAA,eAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,kBAAA,EAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAAA,OAAA;;AACA,MAAA,MAAA,CAAA,UAAA,CAAA,IAAA;AACA;AA/BA,GAjBA;AAkDA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,MAAA,CAAA,MAAA,CAAA,uBAAA,EAAA,KAAA,QAAA;AACA;AApDA,CAAA","sourcesContent":["<template>\n    <div>\n        Example datasheets: \n        <CodeEditor :language=\"language\" \n                    ref=\"codeEditor\" />\n        <label for=\"endpoint\">SPARQL Endpoint: </label>\n        <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n        <input type=\"file\" @change=\"loadTextFromFile\">\n        <Buttons :language=\"language\" \n                 @buttonClicked=\"buttonClicked\" />\n        <select v-model=\"resultTypes.selectedOption\">\n            <option v-for=\"type in resultTypes.options\" \n                    :value=\"type\" \n                    :key=\"type\"> {{ type }} </option>\n        </select>\n        <Output ref=\"output\" />\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport store from '@/store.js'\nimport {saveAs} from 'file-saver'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    store: store, \n    data () {\n        return {\n            language: 'sparql',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            file: null\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor();\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    // this.$refs.codeEditor.sendContent(); \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.$store.getters.SPARQLCode, this.endpoint, this.resultTypes.selectedOption)\n                    var rawResponse = sendQuery(queryURL)\n                    try {\n                        this.$store.commit('updateJSONResponse', JSON.parse(rawResponse))\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        this.$store.commit('changeError', true)\n                        this.$store.commit('updateErrorMessage', rawResponse)\n                    }\n                    break; \n                case \"Save Query\":\n                    var blob = new Blob([this.$store.getters.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n                    saveAs(blob, 'query.txt')\n                    break; \n            }\n        }, \n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateSPARQLCode', e.target.result)\n            reader.readAsText(file)\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"],"sourceRoot":"src/components"}]}