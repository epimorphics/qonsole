{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1593524358703},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IENvZGVFZGl0b3IgZnJvbSAnLi9Db2RlLUVkaXRvci52dWUnOwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJzsKaW1wb3J0IE91dHB1dCBmcm9tICcuL091dHB1dC52dWUnOwppbXBvcnQgeyBtYWtlUXVlcnksIHNlbmRRdWVyeSB9IGZyb20gJ0AvcXVlcnkuanMnOwppbXBvcnQgc3RvcmUgZnJvbSAnQC9zdG9yZS5qcyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU1BBUlFMRWRpdG9yJywKICBjb21wb25lbnRzOiB7CiAgICBDb2RlRWRpdG9yOiBDb2RlRWRpdG9yLAogICAgQnV0dG9uczogQnV0dG9ucywKICAgIE91dHB1dDogT3V0cHV0CiAgfSwKICBzdG9yZTogc3RvcmUsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGxhbmd1YWdlOiAnc3BhcnFsJywKICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vZGJwZWRpYS5vcmcvc3BhcnFsJywKICAgICAgcmVzdWx0VHlwZXM6IHsKICAgICAgICBvcHRpb25zOiBbJ0pTT04nXSwKICAgICAgICBzZWxlY3RlZE9wdGlvbjogJ0pTT04nCiAgICAgIH0gLy8ganNvblJlc3BvbnNlOiBbXSwKICAgICAgLy8gcGFyc2VFcnJvcjogZmFsc2UsCiAgICAgIC8vIGVycm9yOiAnJwoKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBidXR0b25DbGlja2VkOiBmdW5jdGlvbiBidXR0b25DbGlja2VkKGJ1dHRvbikgewogICAgICBzd2l0Y2ggKGJ1dHRvbikgewogICAgICAgIGNhc2UgIkNsZWFyIjoKICAgICAgICAgIHRoaXMuJHJlZnMuY29kZUVkaXRvci5jbGVhckVkaXRvcigpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgIlBlcmZvcm0gUXVlcnkiOgogICAgICAgICAgLy8gR2V0IGNvZGUgZnJvbSBjb2RlIG1pcnJvciAKICAgICAgICAgIC8vIHRoaXMuJHJlZnMuY29kZUVkaXRvci5zZW5kQ29udGVudCgpOyAKICAgICAgICAgIC8vIFNlbmQgU1BBUlFMIHF1ZXJ5IHRvIFNQQVJRTCBlbmRwb2ludCB3aXRoIHRoZSB1c2VyIGRlY2lkZWQgb3V0cHV0IGZvcm1hdAogICAgICAgICAgdmFyIHF1ZXJ5VVJMID0gbWFrZVF1ZXJ5KHRoaXMuJHN0b3JlLmdldHRlcnMuU1BBUlFMQ29kZSwgdGhpcy5lbmRwb2ludCwgdGhpcy5yZXN1bHRUeXBlcy5zZWxlY3RlZE9wdGlvbik7CiAgICAgICAgICB2YXIgcmF3UmVzcG9uc2UgPSBzZW5kUXVlcnkocXVlcnlVUkwpOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlSlNPTlJlc3BvbnNlJywgSlNPTi5wYXJzZShyYXdSZXNwb25zZSkpOwogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2NoYW5nZUVycm9yJywgZmFsc2UpOwogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdjaGFuZ2VFcnJvcicsIHRydWUpOwogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZUVycm9yTWVzc2FnZScpOwogICAgICAgICAgfQoKICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAmBA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,OAAA,MAAA,eAAA;AACA,OAAA,MAAA,MAAA,cAAA;AACA,SAAA,SAAA,EAAA,SAAA,QAAA,YAAA;AACA,OAAA,KAAA,MAAA,YAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,MAAA,EAAA;AAHA,GAFA;AAOA,EAAA,KAAA,EAAA,KAPA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,QAAA,EAAA,2BAFA;AAGA,MAAA,WAAA,EAAA;AAAA,QAAA,OAAA,EAAA,CAAA,MAAA,CAAA;AACA,QAAA,cAAA,EAAA;AADA,OAHA,CAKA;AACA;AACA;;AAPA,KAAA;AASA,GAlBA;AAmBA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,MADA,EACA;AACA,cAAA,MAAA;AACA,aAAA,OAAA;AACA,eAAA,KAAA,CAAA,UAAA,CAAA,WAAA;AACA;;AACA,aAAA,eAAA;AACA;AACA;AACA;AACA,cAAA,QAAA,GAAA,SAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,EAAA,KAAA,QAAA,EAAA,KAAA,WAAA,CAAA,cAAA,CAAA;AACA,cAAA,WAAA,GAAA,SAAA,CAAA,QAAA,CAAA;;AACA,cAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,EAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA;AACA,WAHA,CAGA,OAAA,KAAA,EAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,IAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,oBAAA;AACA;;AAhBA;AAkBA;AApBA;AAnBA,CAAA","sourcesContent":["<template>\n    <div>\n        Example datasheets: \n        <CodeEditor :language=\"language\" \n                    ref=\"codeEditor\" />\n        <label for=\"endpoint\">SPARQL Endpoint: </label>\n        <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n        <Buttons :language=\"language\" \n                 @buttonClicked=\"buttonClicked\" />\n\n        <select v-model=\"resultTypes.selectedOption\">\n            <option v-for=\"type in resultTypes.options\" \n                    :value=\"type\" \n                    :key=\"type\"> {{ type }} </option>\n        </select>\n        <Output ref=\"output\" />\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport store from '@/store.js'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    store: store, \n    data () {\n        return {\n            language: 'sparql',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            // jsonResponse: [],\n            // parseError: false,\n            // error: ''\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor();\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    // this.$refs.codeEditor.sendContent(); \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.$store.getters.SPARQLCode, this.endpoint, this.resultTypes.selectedOption)\n                    var rawResponse = sendQuery(queryURL)\n                    try {\n                        this.$store.commit('updateJSONResponse', JSON.parse(rawResponse))\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        this.$store.commit('changeError', true)\n                        this.$store.commit('updateErrorMessage')\n                    }\n            }\n        }, \n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"],"sourceRoot":"src/components"}]}