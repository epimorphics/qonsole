{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js","mtime":1598624872921},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":1596446669078},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":1596446669324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js"],"names":["makeQuery","sendQuery","saveAs","fs","require","namespaced","state","SPARQLCode","endpoint","errorStatus","errorMessage","resultType","remoteResult","cols","rows","remoteResultIsReady","remoteResultTime","localResult","localResultIsReady","localResultTime","exampleQueries","getters","remoteResultCols","remoteResultRows","localResultCols","localResultRows","mutations","updateCode","newCode","updateResponse","newResponse","jsonResponse","console","log","updateError","newErrorStatus","newErrorMessage","updateEndpoint","newEndpoint","updateRemoteResult","head","vars","i","results","bindings","length","entries","Object","row","j","push","value","updateLocalResult","newLocalResult","variables","updateLocalResultTime","newTime","updateRemoteResultTime","addPrefixToCode","payload","name","url","removePrefixFromCode","removeCode","code","replace","actions","commit","queryStore","dispatch","root","queryEndpoint","t0","performance","now","queryURL","rawResponse","JSON","parse","error","split","t1","Math","round","Number","EPSILON","saveQuery","blob","Blob","type","loadExampleQuery","queryFile","fileName","toLowerCase","concat","readFileSync","data"],"mappings":";;;;;;;;AAAA,SAAQA,SAAR,EAAmBC,SAAnB,QAAmC,0BAAnC;AACA,SAAQC,MAAR,QAAqB,YAArB;;AACA,IAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,UAAU,EAAE,EADT;AAEHC,IAAAA,QAAQ,EAAE,EAFP;AAGHC,IAAAA,WAAW,EAAE,KAHV;AAIHC,IAAAA,YAAY,EAAE,EAJX;AAKHC,IAAAA,UAAU,EAAE,MALT;AAMH;AACAC,IAAAA,YAAY,EAAE;AACVC,MAAAA,IAAI,EAAE,IADI;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAPX;AAWHC,IAAAA,mBAAmB,EAAE,KAXlB;AAYHC,IAAAA,gBAAgB,EAAE,CAZf;AAaH;AACAC,IAAAA,WAAW,EAAE;AACTJ,MAAAA,IAAI,EAAE,IADG;AAETC,MAAAA,IAAI,EAAE;AAFG,KAdV;AAkBHI,IAAAA,kBAAkB,EAAE,KAlBjB;AAmBHC,IAAAA,eAAe,EAAE,CAnBd;AAoBHC,IAAAA,cAAc,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,4BAHY,EAIZ,sBAJY;AApBb,GAFI;AA6BXC,EAAAA,OAAO,EAAE;AACLd,IAAAA,UAAU,EAAE,oBAAAD,KAAK;AAAA,aAAIA,KAAK,CAACC,UAAV;AAAA,KADZ;AAELE,IAAAA,WAAW,EAAE,qBAAAH,KAAK;AAAA,aAAIA,KAAK,CAACG,WAAV;AAAA,KAFb;AAGLC,IAAAA,YAAY,EAAE,sBAAAJ,KAAK;AAAA,aAAIA,KAAK,CAACI,YAAV;AAAA,KAHd;AAILY,IAAAA,gBAAgB,EAAE,0BAAAhB,KAAK;AAAA,aAAIA,KAAK,CAACM,YAAN,CAAmBC,IAAvB;AAAA,KAJlB;AAKLU,IAAAA,gBAAgB,EAAE,0BAAAjB,KAAK;AAAA,aAAIA,KAAK,CAACM,YAAN,CAAmBE,IAAvB;AAAA,KALlB;AAMLC,IAAAA,mBAAmB,EAAE,6BAAAT,KAAK;AAAA,aAAIA,KAAK,CAACS,mBAAV;AAAA,KANrB;AAOLC,IAAAA,gBAAgB,EAAE,0BAAAV,KAAK;AAAA,aAAIA,KAAK,CAACU,gBAAV;AAAA,KAPlB;AAQLQ,IAAAA,eAAe,EAAE,yBAAAlB,KAAK;AAAA,aAAIA,KAAK,CAACW,WAAN,CAAkBJ,IAAtB;AAAA,KARjB;AASLY,IAAAA,eAAe,EAAE,yBAAAnB,KAAK;AAAA,aAAIA,KAAK,CAACW,WAAN,CAAkBH,IAAtB;AAAA,KATjB;AAULI,IAAAA,kBAAkB,EAAE,4BAAAZ,KAAK;AAAA,aAAIA,KAAK,CAACY,kBAAV;AAAA,KAVpB;AAWLC,IAAAA,eAAe,EAAE,yBAAAb,KAAK;AAAA,aAAIA,KAAK,CAACa,eAAV;AAAA,KAXjB;AAYLC,IAAAA,cAAc,EAAE,wBAAAd,KAAK;AAAA,aAAIA,KAAK,CAACc,cAAV;AAAA;AAZhB,GA7BE;AA2CXM,EAAAA,SAAS,EAAE;AACPC,IAAAA,UADO,sBACKrB,KADL,EACYsB,OADZ,EACqB;AACxBtB,MAAAA,KAAK,CAACC,UAAN,GAAmBqB,OAAnB;AACH,KAHM;AAIPC,IAAAA,cAJO,0BAISvB,KAJT,EAIgBwB,WAJhB,EAI6B;AAChCxB,MAAAA,KAAK,CAACyB,YAAN,GAAqBD,WAArB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAK,CAACyB,YAAlB;AACH,KAPM;AAQPG,IAAAA,WARO,uBAQM5B,KARN,QAQgD;AAAA,UAAlC6B,cAAkC,QAAlCA,cAAkC;AAAA,UAAlBC,eAAkB,QAAlBA,eAAkB;AACnD9B,MAAAA,KAAK,CAACG,WAAN,GAAoB0B,cAApB;AACA7B,MAAAA,KAAK,CAACI,YAAN,GAAqB0B,eAArB;AACH,KAXM;AAYPC,IAAAA,cAZO,0BAYS/B,KAZT,EAYgBgC,WAZhB,EAY6B;AAChChC,MAAAA,KAAK,CAACE,QAAN,GAAiB8B,WAAjB;AACH,KAdM;AAePC,IAAAA,kBAfO,8BAeajC,KAfb,EAeoBwB,WAfpB,EAeiC;AACpC;AACAxB,MAAAA,KAAK,CAACM,YAAN,CAAmBC,IAAnB,GAA0BiB,WAAW,CAACU,IAAZ,CAAiBC,IAA3C,CAFoC,CAIpC;;AACA,UAAI3B,IAAI,GAAG,EAAX;;AACA,WAAM,IAAI4B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAEZ,WAAW,CAACa,OAAZ,CAAoBC,QAApB,CAA6BC,MAAjD,EAAyDH,CAAC,EAA1D,EAA8D;AAC1D,YAAII,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAehB,WAAW,CAACa,OAAZ,CAAoBC,QAApB,CAA6BF,CAA7B,CAAf,CAAd;AACA,YAAIM,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACD,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrCD,UAAAA,GAAG,CAACE,IAAJ,CAASJ,OAAO,CAACG,CAAD,CAAP,CAAW,CAAX,EAAcE,KAAvB;AACH;;AACDrC,QAAAA,IAAI,CAACoC,IAAL,CAAUF,GAAV;AACH;;AACD1C,MAAAA,KAAK,CAACM,YAAN,CAAmBE,IAAnB,GAA0BA,IAA1B;AAEAR,MAAAA,KAAK,CAACS,mBAAN,GAA4B,IAA5B;AACH,KAhCM;AAiCPqC,IAAAA,iBAjCO,6BAiCY9C,KAjCZ,EAiCmB+C,cAjCnB,EAiCmC;AACtC,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIR,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeO,cAAc,CAAC,CAAD,CAA7B,CAAd;;AACA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,OAAO,CAACD,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACrCY,QAAAA,SAAS,CAACJ,IAAV,CAAeJ,OAAO,CAACJ,CAAD,CAAP,CAAW,CAAX,CAAf;AACH;;AACDpC,MAAAA,KAAK,CAACW,WAAN,CAAkBJ,IAAlB,GAAyByC,SAAzB;AAEA,UAAIxC,IAAI,GAAG,EAAX;;AACA,WAAK4B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGW,cAAc,CAACR,MAA/B,EAAuCH,CAAC,EAAxC,EAA4C;AACxCI,QAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeO,cAAc,CAACX,CAAD,CAA7B,CAAV;AACA,YAAIM,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACD,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrCD,UAAAA,GAAG,CAACE,IAAJ,CAASJ,OAAO,CAACG,CAAD,CAAP,CAAW,CAAX,EAAcE,KAAvB;AACH;;AACDrC,QAAAA,IAAI,CAACoC,IAAL,CAAUF,GAAV;AACH;;AACD1C,MAAAA,KAAK,CAACW,WAAN,CAAkBH,IAAlB,GAAyBA,IAAzB;AAEAR,MAAAA,KAAK,CAACY,kBAAN,GAA2B,IAA3B;AACH,KArDM;AAsDPqC,IAAAA,qBAtDO,iCAsDgBjD,KAtDhB,EAsDuBkD,OAtDvB,EAsDgC;AACnClD,MAAAA,KAAK,CAACa,eAAN,GAAwBqC,OAAxB;AACH,KAxDM;AAyDPC,IAAAA,sBAzDO,kCAyDiBnD,KAzDjB,EAyDwBkD,OAzDxB,EAyDiC;AACpClD,MAAAA,KAAK,CAACU,gBAAN,GAAyBwC,OAAzB;AACH,KA3DM;AA4DPE,IAAAA,eA5DO,2BA4DUpD,KA5DV,EA4DiBqD,OA5DjB,EA4D0B;AAC7BrD,MAAAA,KAAK,CAACC,UAAN,GAAmB,YAAYoD,OAAO,CAACC,IAApB,GAA2B,KAA3B,GAAmCD,OAAO,CAACE,GAA3C,GAAiD,KAAjD,GAAyDvD,KAAK,CAACC,UAAlF;AACH,KA9DM;AA+DPuD,IAAAA,oBA/DO,gCA+DexD,KA/Df,EA+DsBqD,OA/DtB,EA+D+B;AAClC,UAAII,UAAU,GAAG,YAAYJ,OAAO,CAACC,IAApB,GAA2B,KAA3B,GAAmCD,OAAO,CAACE,GAA3C,GAAiD,KAAlE;AACA,UAAIG,IAAI,GAAG1D,KAAK,CAACC,UAAjB;AACAD,MAAAA,KAAK,CAACC,UAAN,GAAmByD,IAAI,CAACC,OAAL,CAAaF,UAAb,EAAyB,EAAzB,CAAnB;AACH;AAnEM,GA3CA;AAgHXG,EAAAA,OAAO,EAAE;AACLvC,IAAAA,UAAU,EAAE,2BAAWC,OAAX,EAAuB;AAAA,UAArBuC,MAAqB,SAArBA,MAAqB;AAC/BA,MAAAA,MAAM,CAAC,YAAD,EAAevC,OAAf,CAAN;AACH,KAHI;AAILwC,IAAAA,UAAU,EAAE,2BAAuB;AAAA,UAArB9D,KAAqB,SAArBA,KAAqB;AAAA,UAAd+D,QAAc,SAAdA,QAAc;AAC/BA,MAAAA,QAAQ,CAAC,2BAAD,EAA8B/D,KAAK,CAACC,UAApC,EAAgD;AAAC+D,QAAAA,IAAI,EAAE;AAAP,OAAhD,CAAR;AACH,KANI;AAOLC,IAAAA,aAAa,EAAE,8BAAqB;AAAA,UAAnBjE,KAAmB,SAAnBA,KAAmB;AAAA,UAAZ6D,MAAY,SAAZA,MAAY;AAChC,UAAIK,EAAE,GAAGC,WAAW,CAACC,GAAZ,EAAT;AAEApE,MAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,UAAI4D,QAAQ,GAAG3E,SAAS,CAACM,KAAK,CAACC,UAAP,EAAmBD,KAAK,CAACE,QAAzB,EAAmCF,KAAK,CAACK,UAAzC,CAAxB;AACA,UAAIiE,WAAW,GAAG3E,SAAS,CAAC0E,QAAD,CAA3B;;AACA,UAAI;AACAR,QAAAA,MAAM,CAAC,oBAAD,EAAuBU,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAvB,CAAN;AACAT,QAAAA,MAAM,CAAC,aAAD,EAAgB;AAAChC,UAAAA,cAAc,EAAE,KAAjB;AAAwBC,UAAAA,eAAe,EAAE;AAAzC,SAAhB,CAAN;AACH,OAHD,CAGE,OAAO2C,KAAP,EAAc;AACZZ,QAAAA,MAAM,CAAC,aAAD,EAAgB;AAAChC,UAAAA,cAAc,EAAE,IAAjB;AAAuBC,UAAAA,eAAe,EAAEwC,WAAW,CAACI,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB;AAAxC,SAAhB,CAAN;AACH;;AACD,UAAIC,EAAE,GAAGR,WAAW,CAACC,GAAZ,EAAT;AACAP,MAAAA,MAAM,CAAC,wBAAD,EAA4Be,IAAI,CAACC,KAAL,CAAY,CAACF,EAAE,GAACT,EAAJ,IAAU,GAAV,GAAgBY,MAAM,CAACC,OAAnC,IAA+C,GAA3E,CAAN;AACH,KArBI;AAsBLhD,IAAAA,cAAc,EAAE,+BAAWC,WAAX,EAA2B;AAAA,UAAzB6B,MAAyB,SAAzBA,MAAyB;AACvCA,MAAAA,MAAM,CAAC,gBAAD,EAAmB7B,WAAnB,CAAN;AACH,KAxBI;AAyBLgD,IAAAA,SAAS,EAAE,0BAAa;AAAA,UAAXhF,KAAW,SAAXA,KAAW;AACpB0B,MAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAK,CAACC,UAAlB;AACA,UAAIgF,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAClF,KAAK,CAACC,UAAP,CAAT,EAA6B;AAACkF,QAAAA,IAAI,EAAE;AAAP,OAA7B,CAAX;AACAvF,MAAAA,MAAM,CAACqF,IAAD,EAAO,WAAP,CAAN;AACH,KA7BI;AA8BLnC,IAAAA,iBAAiB,EAAE,kCAAWC,cAAX,EAA8B;AAAA,UAA5Bc,MAA4B,SAA5BA,MAA4B;AAC7CA,MAAAA,MAAM,CAAC,mBAAD,EAAsBd,cAAtB,CAAN;AACH,KAhCI;AAiCLK,IAAAA,eAAe,EAAE,gCAAWC,OAAX,EAAuB;AAAA,UAArBQ,MAAqB,SAArBA,MAAqB;AACpCA,MAAAA,MAAM,CAAC,iBAAD,EAAoBR,OAApB,CAAN;AACH,KAnCI;AAoCLG,IAAAA,oBAAoB,EAAE,qCAAWH,OAAX,EAAuB;AAAA,UAArBQ,MAAqB,SAArBA,MAAqB;AACzCA,MAAAA,MAAM,CAAC,sBAAD,EAAyBR,OAAzB,CAAN;AACH,KAtCI;AAuCL+B,IAAAA,gBAAgB,EAAE,kCAAWC,SAAX,EAAyB;AAAA,UAAvBxB,MAAuB,UAAvBA,MAAuB;AACvC,UAAIyB,QAAQ,GAAG,gBAAgBD,SAAS,CAACE,WAAV,GAAwBb,KAAxB,CAA8B,GAA9B,EAAmCc,MAAnC,CAA0C,GAA1C,CAAhB,GAAiE,SAAhF;AACA3F,MAAAA,EAAE,CAAC4F,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,EAAkC,UAACb,KAAD,EAAQiB,IAAR,EAAiB;AAC/C,YAAI,CAACjB,KAAL,EAAY;AACRZ,UAAAA,MAAM,CAAC,YAAD,EAAe6B,IAAf,CAAN;AACH;AACJ,OAJD;AAKH;AA9CI;AAhHE,CAAf","sourcesContent":["import {makeQuery, sendQuery} from '@/scripts/remoteQuery.js'\nimport {saveAs} from 'file-saver'\nconst fs = require('fs')\n\nexport default {\n    namespaced: true, \n    state: {\n        SPARQLCode: '', \n        endpoint: '', \n        errorStatus: false,\n        errorMessage: '', \n        resultType: 'JSON', \n        // For SPARQL Editor only \n        remoteResult: {\n            cols: null,\n            rows: null\n        },\n        remoteResultIsReady: false,\n        remoteResultTime: 0, \n        // For using SPARQL editor to query \"local\" RDF store \n        localResult: {\n            cols: null, \n            rows: null\n        },\n        localResultIsReady: false,\n        localResultTime: 0,\n        exampleQueries: [\n            'Class Demographic',\n            'Class Diagram',\n            'Class diagram (Exhaustive)',\n            'Property Demographic'\n        ]\n    }, \n    getters: {\n        SPARQLCode: state => state.SPARQLCode,\n        errorStatus: state => state.errorStatus,\n        errorMessage: state => state.errorMessage, \n        remoteResultCols: state => state.remoteResult.cols,\n        remoteResultRows: state => state.remoteResult.rows, \n        remoteResultIsReady: state => state.remoteResultIsReady,\n        remoteResultTime: state => state.remoteResultTime, \n        localResultCols: state => state.localResult.cols,\n        localResultRows: state => state.localResult.rows,\n        localResultIsReady: state => state.localResultIsReady,\n        localResultTime: state => state.localResultTime,\n        exampleQueries: state => state.exampleQueries\n    },\n    mutations: {\n        updateCode (state, newCode) {\n            state.SPARQLCode = newCode \n        },\n        updateResponse (state, newResponse) {\n            state.jsonResponse = newResponse\n            console.log(state.jsonResponse)\n        },\n        updateError (state, {newErrorStatus, newErrorMessage}) {\n            state.errorStatus = newErrorStatus\n            state.errorMessage = newErrorMessage\n        },\n        updateEndpoint (state, newEndpoint) {\n            state.endpoint = newEndpoint\n        },\n        updateRemoteResult (state, newResponse) {\n            // Get collumn headings i.e. variables \n            state.remoteResult.cols = newResponse.head.vars \n            \n            // Get row of data for output \n            var rows = []\n            for ( var i = 0; i< newResponse.results.bindings.length; i++) {\n                var entries = Object.entries(newResponse.results.bindings[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            state.remoteResult.rows = rows \n\n            state.remoteResultIsReady = true \n        },\n        updateLocalResult (state, newLocalResult) {\n            var variables = []\n            var entries = Object.entries(newLocalResult[0])\n            for (var i = 0; i < entries.length; i++) {\n                variables.push(entries[i][0])\n            }\n            state.localResult.cols = variables \n\n            var rows = []\n            for (i = 0; i < newLocalResult.length; i++) {\n                entries = Object.entries(newLocalResult[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            state.localResult.rows = rows \n\n            state.localResultIsReady = true \n        },\n        updateLocalResultTime (state, newTime) {\n            state.localResultTime = newTime \n        },\n        updateRemoteResultTime (state, newTime) {\n            state.remoteResultTime = newTime\n        },\n        addPrefixToCode (state, payload) {\n            state.SPARQLCode = 'PREFIX ' + payload.name + ': <' + payload.url + '>\\n' + state.SPARQLCode\n        },\n        removePrefixFromCode (state, payload) {\n            let removeCode = 'PREFIX ' + payload.name + ': <' + payload.url + '>\\n'\n            let code = state.SPARQLCode\n            state.SPARQLCode = code.replace(removeCode, '')\n        }\n    },\n    actions: {\n        updateCode: ({commit}, newCode) => {\n            commit('updateCode', newCode)\n        },\n        queryStore: ({state, dispatch}) => {\n            dispatch('rdfEditorStore/queryStore', state.SPARQLCode, {root: true})\n        },\n        queryEndpoint: ({state, commit}) => {\n            var t0 = performance.now()\n\n            state.remoteResultIsReady = false \n            var queryURL = makeQuery(state.SPARQLCode, state.endpoint, state.resultType)\n            var rawResponse = sendQuery(queryURL)\n            try {\n                commit('updateRemoteResult', JSON.parse(rawResponse))\n                commit('updateError', {newErrorStatus: false, newErrorMessage: ''})\n            } catch (error) {\n                commit('updateError', {newErrorStatus: true, newErrorMessage: rawResponse.split(\"\\n\")[0]})\n            }\n            var t1 = performance.now()\n            commit('updateRemoteResultTime', (Math.round( (t1-t0) * 100 + Number.EPSILON ) / 100))\n        },\n        updateEndpoint: ({commit}, newEndpoint) => {\n            commit('updateEndpoint', newEndpoint)\n        },\n        saveQuery: ({state}) => {\n            console.log(state.SPARQLCode)\n            var blob = new Blob([state.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n            saveAs(blob, 'query.txt')\n        },\n        updateLocalResult: ({commit}, newLocalResult) => {\n            commit('updateLocalResult', newLocalResult)\n        },\n        addPrefixToCode: ({commit}, payload) => {\n            commit('addPrefixToCode', payload)\n        },\n        removePrefixFromCode: ({commit}, payload) => {\n            commit('removePrefixFromCode', payload)\n        },\n        loadExampleQuery: ({commit}, queryFile) => {\n            var fileName = \"../toolbox/\" + queryFile.toLowerCase().split(\" \").concat(\"-\") + \".sparql\"\n            fs.readFileSync(fileName, 'utf8', (error, data) => {\n                if (!error) {\n                    commit('updateCode', data)\n                }\n            })\n        }\n    }\n}"]}]}