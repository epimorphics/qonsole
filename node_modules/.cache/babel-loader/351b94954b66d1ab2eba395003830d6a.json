{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/RDF-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/RDF-Editor.vue","mtime":1593608358851},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgQ29kZUVkaXRvciBmcm9tICcuL0NvZGUtRWRpdG9yLnZ1ZSc7CmltcG9ydCBCdXR0b25zIGZyb20gJy4vQnV0dG9ucy52dWUnOwppbXBvcnQgT3V0cHV0IGZyb20gJy4vT3V0cHV0LnZ1ZSc7CmltcG9ydCBzdG9yZSBmcm9tICdAL3N0b3JlLmpzJzsKCnZhciBOMyA9IHJlcXVpcmUoJ24zJyk7CgpmdW5jdGlvbiBwYXJzZVR1cnRsZShjb2RlKSB7CiAgdmFyIHBhcnNlciA9IG5ldyBOMy5QYXJzZXIoKTsKICBwYXJzZXIucGFyc2UoY29kZSwgZnVuY3Rpb24gKGVycm9yLCBxdWFkLCBwcmVmaXhlcykgewogICAgaWYgKGVycm9yKSB7CiAgICAgIHN0b3JlLmNvbW1pdCgnY2hhbmdlRXJyb3InLCB0cnVlKTsKICAgICAgc3RvcmUuY29tbWl0KCd1cGRhdGVFcnJvck1lc3NhZ2UnLCBlcnJvcik7CiAgICAgIHJldHVybiBlcnJvcjsKICAgIH0gZWxzZSBpZiAocHJlZml4ZXMpIHsKICAgICAgdmFyIGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhwcmVmaXhlcyk7CiAgICAgIGNvbnNvbGUubG9nKGVudHJpZXMpOwoKICAgICAgZm9yICh2YXIgZW50cnkgaW4gZW50cmllcykgewogICAgICAgIHN0b3JlLmNvbW1pdCgnYWRkUHJlZml4JywgZW50cnkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBzdG9yZS5jb21taXQoJ3BvcHVsYXRlUkRGU3RvcmUnLCBxdWFkKTsKICAgIH0KICB9KTsKfQoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdSREZFZGl0b3InLAogIGNvbXBvbmVudHM6IHsKICAgIENvZGVFZGl0b3I6IENvZGVFZGl0b3IsCiAgICBCdXR0b25zOiBCdXR0b25zLAogICAgT3V0cHV0OiBPdXRwdXQKICB9LAogIHN0b3JlOiBzdG9yZSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbGFuZ3VhZ2U6ICd0dXJ0bGUnLAogICAgICBwYXJzZWRSREY6ICcnCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgYnV0dG9uQ2xpY2tlZDogZnVuY3Rpb24gYnV0dG9uQ2xpY2tlZChidXR0b24pIHsKICAgICAgc3dpdGNoIChidXR0b24pIHsKICAgICAgICBjYXNlICJDbGVhciI6CiAgICAgICAgICB0aGlzLiRyZWZzLmNvZGVFZGl0b3IuY2xlYXJFZGl0b3IoKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJMb2FkIjoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnY2xlYXJUdXJ0bGVTdG9yZScpOwogICAgICAgICAgICBwYXJzZVR1cnRsZSh0aGlzLiRzdG9yZS5nZXR0ZXJzLnR1cnRsZUNvZGUpOwogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2NoYW5nZUVycm9yJywgZmFsc2UpOwogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVDdXJyZW50TGFuZ3VhZ2UnLCB0aGlzLmxhbmd1YWdlKTsKICB9Cn07"},{"version":3,"sources":["RDF-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,OAAA,MAAA,eAAA;AACA,OAAA,MAAA,MAAA,cAAA;AACA,OAAA,KAAA,MAAA,YAAA;;AAEA,IAAA,EAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAEA,SAAA,WAAA,CAAA,IAAA,EAAA;AACA,MAAA,MAAA,GAAA,IAAA,EAAA,CAAA,MAAA,EAAA;AACA,EAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EACA,UAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,MAAA,KAAA,CAAA,MAAA,CAAA,aAAA,EAAA,IAAA;AACA,MAAA,KAAA,CAAA,MAAA,CAAA,oBAAA,EAAA,KAAA;AACA,aAAA,KAAA;AACA,KAJA,MAIA,IAAA,QAAA,EAAA;AACA,UAAA,OAAA,GAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,OAAA;;AACA,WAAA,IAAA,KAAA,IAAA,OAAA,EAAA;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,WAAA,EAAA,KAAA;AACA;AACA,KANA,MAMA;AACA,MAAA,KAAA,CAAA,MAAA,CAAA,kBAAA,EAAA,IAAA;AACA;AACA,GAfA;AAgBA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,MAAA,EAAA;AAHA,GAFA;AAOA,EAAA,KAAA,EAAA,KAPA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,SAAA,EAAA;AAFA,KAAA;AAIA,GAbA;AAcA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,MADA,EACA;AACA,cAAA,MAAA;AACA,aAAA,OAAA;AACA,eAAA,KAAA,CAAA,UAAA,CAAA,WAAA;AACA;;AACA,aAAA,MAAA;AACA,cAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,kBAAA;AACA,YAAA,WAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA;AACA,WAJA,CAIA,OAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA;;AACA;AAZA;AAcA;AAhBA,GAdA;AAgCA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,MAAA,CAAA,MAAA,CAAA,uBAAA,EAAA,KAAA,QAAA;AACA;AAlCA,CAAA","sourcesContent":["<template>\n    <div>\n        This is where the RDF editor will go!\n        <CodeEditor :language=\"language\" \n        ref=\"codeEditor\" \n        @sendCode=\"code = $event\" />\n        <Buttons :language=\"language\"\n            @buttonClicked=\"buttonClicked\" /> \n        <Output />\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue' \nimport Output from './Output.vue'\nimport store from '@/store.js'\n\nconst N3 = require('n3');\n\nfunction parseTurtle(code) {\n    const parser = new N3.Parser();\n    parser.parse(code, \n        (error, quad, prefixes) => {\n            if (error) {\n                store.commit('changeError', true)\n                store.commit('updateErrorMessage', error)\n                return error \n            } else if (prefixes) {\n                var entries = Object.entries(prefixes)\n                console.log(entries)\n                for (var entry in entries) {\n                    store.commit('addPrefix', entry)\n                }\n            } else {\n                store.commit('populateRDFStore', quad)\n            }\n        })\n}\n\nexport default {\n    name: 'RDFEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output \n    },\n    store: store, \n    data () {\n        return {\n            language: 'turtle', \n            parsedRDF: '' \n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) { \n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor(); \n                    break; \n                case \"Load\":\n                    try {\n                        this.$store.commit('clearTurtleStore')\n                        parseTurtle(this.$store.getters.turtleCode)\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    break;\n            }\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    }\n}\n</script>\n<style >\ndiv {\n    line-height: 2; \n}\n</style>"],"sourceRoot":"src/components"}]}