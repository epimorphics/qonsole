{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/rdfeditor.store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/rdfeditor.store.js","mtime":1598445432727},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":1596446669078},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":1596446669324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyogU3RvcmUgbW9kdWxlIHRvIGhhbmRsZSBSREYgRWRpdG9yIGNvbXBvbmVudCBzdG9yZSAqLwp2YXIgTjMgPSByZXF1aXJlKCduMycpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIC8vIEF0dHJpYnV0ZXMgb2YgdGhlIHJkZkVkaXRvciBjb21wb25lbnQgCiAgICB0dXJ0bGVDb2RlOiAnJywKICAgIHJkZnN0b3JlOiBuZXcgTjMuU3RvcmUoKSwKICAgIGVycm9yU3RhdHVzOiBmYWxzZSwKICAgIGVycm9yTWVzc2FnZTogJycKICB9LAogIGdldHRlcnM6IHsKICAgIC8vIGdldHRlcnMgYW5kIGNvbXB1dGVkIHByb3BzIG9mIHJkZkVkaXRvciAKICAgIGVycm9yU3RhdHVzOiBmdW5jdGlvbiBlcnJvclN0YXR1cyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuZXJyb3JTdGF0dXM7CiAgICB9LAogICAgZXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBlcnJvck1lc3NhZ2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmVycm9yTWVzc2FnZTsKICAgIH0sCiAgICB0dXJ0bGVDb2RlOiBmdW5jdGlvbiB0dXJ0bGVDb2RlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS50dXJ0bGVDb2RlOwogICAgfSwKICAgIHJlc3VsdHNSZWFkeTogZnVuY3Rpb24gcmVzdWx0c1JlYWR5KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5yZXN1bHRzUmVhZHk7CiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIC8vIGJhY2stZW5kIGZ1bmN0aW9ucyAKICAgIHVwZGF0ZUNvZGU6IGZ1bmN0aW9uIHVwZGF0ZUNvZGUoc3RhdGUsIG5ld0NvZGUpIHsKICAgICAgc3RhdGUudHVydGxlQ29kZSA9IG5ld0NvZGU7CiAgICB9LAogICAgdXBkYXRlRXJyb3I6IGZ1bmN0aW9uIHVwZGF0ZUVycm9yKHN0YXRlLCBfcmVmKSB7CiAgICAgIHZhciBuZXdFcnJvclN0YXR1cyA9IF9yZWYubmV3RXJyb3JTdGF0dXMsCiAgICAgICAgICBuZXdFcnJvck1lc3NhZ2UgPSBfcmVmLm5ld0Vycm9yTWVzc2FnZTsKICAgICAgc3RhdGUuZXJyb3JTdGF0dXMgPSBuZXdFcnJvclN0YXR1cywgc3RhdGUuZXJyb3JNZXNzYWdlID0gbmV3RXJyb3JNZXNzYWdlOwogICAgfSwKICAgIGxvYWRSREY6IGZ1bmN0aW9uIGxvYWRSREYoc3RhdGUpIHsKICAgICAgdmFyIHBhcnNlciA9IG5ldyBOMy5QYXJzZXIoKTsKICAgICAgcGFyc2VyLnBhcnNlKHN0YXRlLnR1cnRsZUNvZGUsIGZ1bmN0aW9uIChfLCBxdWFkLCBwcmVmaXhlcykgewogICAgICAgIGlmIChxdWFkKSB7CiAgICAgICAgICBzdGF0ZS5yZGZzdG9yZS5hZGRRdWFkKHF1YWQuc3ViamVjdCwgcXVhZC5wcmVkaWNhdGUsIHF1YWQub2JqZWN0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2cocHJlZml4ZXMpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICB1cGRhdGVDb2RlOiBmdW5jdGlvbiB1cGRhdGVDb2RlKF9yZWYyLCBuZXdDb2RlKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgIGNvbW1pdCgndXBkYXRlQ29kZScsIG5ld0NvZGUpOwogICAgfSwKICAgIGxvYWRSREY6IGZ1bmN0aW9uIGxvYWRSREYoX3JlZjMpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgY29tbWl0KCdsb2FkUkRGJyk7CiAgICB9LAogICAgcXVlcnlTdG9yZTogZnVuY3Rpb24gcXVlcnlTdG9yZSgpIHsKICAgICAgY29uc29sZS5sb2coIlRoaXMgZnVuY3Rpb24gaXMgdW5kZXIgY29uc3RydWN0aW9uISIpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/rdfeditor.store.js"],"names":["N3","require","namespaced","state","turtleCode","rdfstore","Store","errorStatus","errorMessage","getters","resultsReady","mutations","updateCode","newCode","updateError","newErrorStatus","newErrorMessage","loadRDF","parser","Parser","parse","_","quad","prefixes","addQuad","subject","predicate","object","console","log","actions","commit","queryStore"],"mappings":"AAAA;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXC,EAAAA,KAAK,EAAE;AACH;AACAC,IAAAA,UAAU,EAAE,EAFT;AAGHC,IAAAA,QAAQ,EAAE,IAAIL,EAAE,CAACM,KAAP,EAHP;AAIHC,IAAAA,WAAW,EAAE,KAJV;AAKHC,IAAAA,YAAY,EAAE;AALX,GAFI;AASXC,EAAAA,OAAO,EAAE;AACL;AACAF,IAAAA,WAAW,EAAE,qBAAAJ,KAAK;AAAA,aAAIA,KAAK,CAACI,WAAV;AAAA,KAFb;AAGLC,IAAAA,YAAY,EAAE,sBAAAL,KAAK;AAAA,aAAIA,KAAK,CAACK,YAAV;AAAA,KAHd;AAILJ,IAAAA,UAAU,EAAE,oBAAAD,KAAK;AAAA,aAAIA,KAAK,CAACC,UAAV;AAAA,KAJZ;AAKLM,IAAAA,YAAY,EAAE,sBAAAP,KAAK;AAAA,aAAIA,KAAK,CAACO,YAAV;AAAA;AALd,GATE;AAgBXC,EAAAA,SAAS,EAAE;AACP;AACAC,IAAAA,UAFO,sBAEKT,KAFL,EAEYU,OAFZ,EAEqB;AACxBV,MAAAA,KAAK,CAACC,UAAN,GAAmBS,OAAnB;AACH,KAJM;AAKPC,IAAAA,WALO,uBAKMX,KALN,QAKgD;AAAA,UAAlCY,cAAkC,QAAlCA,cAAkC;AAAA,UAAlBC,eAAkB,QAAlBA,eAAkB;AACnDb,MAAAA,KAAK,CAACI,WAAN,GAAoBQ,cAApB,EACAZ,KAAK,CAACK,YAAN,GAAqBQ,eADrB;AAEH,KARM;AASPC,IAAAA,OATO,mBASEd,KATF,EASS;AACZ,UAAMe,MAAM,GAAG,IAAIlB,EAAE,CAACmB,MAAP,EAAf;AACAD,MAAAA,MAAM,CAACE,KAAP,CACIjB,KAAK,CAACC,UADV,EAEI,UAACiB,CAAD,EAAIC,IAAJ,EAAUC,QAAV,EAAuB;AACnB,YAAID,IAAJ,EAAU;AACNnB,UAAAA,KAAK,CAACE,QAAN,CAAemB,OAAf,CAAuBF,IAAI,CAACG,OAA5B,EAAqCH,IAAI,CAACI,SAA1C,EAAqDJ,IAAI,CAACK,MAA1D;AACH,SAFD,MAEO;AACHC,UAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACH;AACJ,OARL;AAUH;AArBM,GAhBA;AAuCXO,EAAAA,OAAO,EAAE;AACLlB,IAAAA,UAAU,EAAE,2BAAaC,OAAb,EAAyB;AAAA,UAAtBkB,MAAsB,SAAtBA,MAAsB;AACjCA,MAAAA,MAAM,CAAC,YAAD,EAAelB,OAAf,CAAN;AACH,KAHI;AAILI,IAAAA,OAAO,EAAE,wBAAc;AAAA,UAAZc,MAAY,SAAZA,MAAY;AACnBA,MAAAA,MAAM,CAAC,SAAD,CAAN;AACH,KANI;AAOLC,IAAAA,UAAU,EAAE,sBAAM;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACH;AATI;AAvCE,CAAf","sourcesContent":["/* Store module to handle RDF Editor component store */\n\nconst N3 = require('n3')\n\nexport default {\n    namespaced: true,\n    state: {\n        // Attributes of the rdfEditor component \n        turtleCode: '',\n        rdfstore: new N3.Store(), \n        errorStatus: false, \n        errorMessage: '',\n    },\n    getters: {\n        // getters and computed props of rdfEditor \n        errorStatus: state => state.errorStatus, \n        errorMessage: state => state.errorMessage,\n        turtleCode: state => state.turtleCode,\n        resultsReady: state => state.resultsReady,\n    },\n    mutations: {\n        // back-end functions \n        updateCode (state, newCode) {\n            state.turtleCode = newCode \n        },\n        updateError (state, {newErrorStatus, newErrorMessage}) {\n            state.errorStatus = newErrorStatus, \n            state.errorMessage = newErrorMessage \n        },\n        loadRDF (state) {\n            const parser = new N3.Parser();\n            parser.parse(\n                state.turtleCode, \n                (_, quad, prefixes) => {\n                    if (quad) {\n                        state.rdfstore.addQuad(quad.subject, quad.predicate, quad.object)\n                    } else {\n                        console.log(prefixes)\n                    }\n                }\n            )\n        }\n    },\n    actions: {\n        updateCode: ({ commit }, newCode) => {\n            commit('updateCode', newCode) \n        },\n        loadRDF: ({commit}) => {\n            commit('loadRDF')\n        },\n        queryStore: () => {\n            console.log(\"This function is under construction!\")\n        }\n    }\n}"]}]}