{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1594309177812},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IENvZGVFZGl0b3IgZnJvbSAnLi9Db2RlLUVkaXRvci52dWUnOwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJzsKaW1wb3J0IE91dHB1dCBmcm9tICcuL091dHB1dC52dWUnOwppbXBvcnQgeyBtYWtlUXVlcnksIHNlbmRRdWVyeSB9IGZyb20gJ0AvcXVlcnkuanMnOwppbXBvcnQgc3RvcmUgZnJvbSAnQC9zdG9yZS5qcyc7CmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1NQQVJRTEVkaXRvcicsCiAgY29tcG9uZW50czogewogICAgQ29kZUVkaXRvcjogQ29kZUVkaXRvciwKICAgIEJ1dHRvbnM6IEJ1dHRvbnMsCiAgICBPdXRwdXQ6IE91dHB1dAogIH0sCiAgcHJvcHM6IFsncmRmc3BhcnFsJ10sCiAgc3RvcmU6IHN0b3JlLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsYW5ndWFnZTogJ3NwYXJxbCcsCiAgICAgIGVuZHBvaW50OiAnaHR0cDovL2RicGVkaWEub3JnL3NwYXJxbCcsCiAgICAgIHJlc3VsdFR5cGVzOiB7CiAgICAgICAgb3B0aW9uczogWydKU09OJ10sCiAgICAgICAgc2VsZWN0ZWRPcHRpb246ICdKU09OJwogICAgICB9LAogICAgICBmaWxlOiBudWxsCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgYnV0dG9uQ2xpY2tlZDogZnVuY3Rpb24gYnV0dG9uQ2xpY2tlZChidXR0b24pIHsKICAgICAgc3dpdGNoIChidXR0b24pIHsKICAgICAgICBjYXNlICJDbGVhciI6CiAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZVNQQVJRTENvZGUnLCAnJyk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAiUGVyZm9ybSBRdWVyeSI6CiAgICAgICAgICAvLyBHZXQgY29kZSBmcm9tIGNvZGUgbWlycm9yIAogICAgICAgICAgLy8gU2VuZCBTUEFSUUwgcXVlcnkgdG8gU1BBUlFMIGVuZHBvaW50IHdpdGggdGhlIHVzZXIgZGVjaWRlZCBvdXRwdXQgZm9ybWF0CiAgICAgICAgICB2YXIgcXVlcnlVUkwgPSBtYWtlUXVlcnkodGhpcy4kc3RvcmUuZ2V0dGVycy5TUEFSUUxDb2RlLCB0aGlzLmVuZHBvaW50LCB0aGlzLnJlc3VsdFR5cGVzLnNlbGVjdGVkT3B0aW9uKTsKICAgICAgICAgIHZhciByYXdSZXNwb25zZSA9IHNlbmRRdWVyeShxdWVyeVVSTCk7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVKU09OUmVzcG9uc2UnLCBKU09OLnBhcnNlKHJhd1Jlc3BvbnNlKSk7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnY2hhbmdlRXJyb3InLCBmYWxzZSk7CiAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2NoYW5nZUVycm9yJywgdHJ1ZSk7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlRXJyb3JNZXNzYWdlJywgcmF3UmVzcG9uc2UpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJTYXZlIFF1ZXJ5IjoKICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3RoaXMuJHN0b3JlLmdldHRlcnMuU1BBUlFMQ29kZV0sIHsKICAgICAgICAgICAgdHlwZTogInRleHQvcGxhaW47Y2hhcnNldD11dGYtOCIKICAgICAgICAgIH0pOwogICAgICAgICAgc2F2ZUFzKGJsb2IsICdxdWVyeS50eHQnKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJRdWVyeSBTdG9yZSI6CiAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3F1ZXJ5U3RvcmUnKTsKICAgICAgfQogICAgfSwKICAgIGxvYWRUZXh0RnJvbUZpbGU6IGZ1bmN0aW9uIGxvYWRUZXh0RnJvbUZpbGUoZXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBmaWxlID0gZXYudGFyZ2V0LmZpbGVzWzBdOwogICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBfdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVTUEFSUUxDb2RlJywgZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKCiAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpOwogICAgfSwKICAgIHNhdmVRdWVyeTogZnVuY3Rpb24gc2F2ZVF1ZXJ5KCkgewogICAgICB2YXIgcXVlcnkgPSB7CiAgICAgICAgaWQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuc2F2ZWRRdWVyaWVzLmxlbmd0aCwKICAgICAgICBxdWVyeVRleHQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuU1BBUlFMQ29kZSwKICAgICAgICBxdWVyeVJlc3VsdDogdGhpcy4kc3RvcmUuZ2V0dGVycy5xdWVyeVJlc3VsdAogICAgICB9OwogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FkZFF1ZXJ5VG9TYXZlZFF1ZXJpZXMnLCBxdWVyeSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVDdXJyZW50TGFuZ3VhZ2UnLCB0aGlzLmxhbmd1YWdlKTsKICB9Cn07"},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div v-show=\"!rdfsparql\">\n            Example datasheets: \n            <CodeEditor :language=\"language\" \n                        ref=\"codeEditor\" />\n            <label for=\"endpoint\">Query from: </label>\n            <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"language\" \n                    @buttonClicked=\"buttonClicked\" />\n            <select v-model=\"resultTypes.selectedOption\">\n                <option v-for=\"type in resultTypes.options\" \n                        :value=\"type\" \n                        :key=\"type\"> {{ type }} </option>\n            </select>\n            <Output ref=\"output\" />\n        </div>\n        <div v-show=\"rdfsparql\">\n            Example datasheets: \n            <CodeEditor :language=\"language\" \n                        ref=\"codeEditor\" />\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"'rdfsparql'\" \n                    @buttonClicked=\"buttonClicked\" />\n        </div>\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport store from '@/store.js'\nimport {saveAs} from 'file-saver'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    props: ['rdfsparql'], \n    store: store, \n    data () {\n        return {\n            language: 'sparql',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            file: null,\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$store.commit('updateSPARQLCode','')\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.$store.getters.SPARQLCode, this.endpoint, this.resultTypes.selectedOption)\n                    var rawResponse = sendQuery(queryURL)\n                    try {\n                        this.$store.commit('updateJSONResponse', JSON.parse(rawResponse))\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        this.$store.commit('changeError', true)\n                        this.$store.commit('updateErrorMessage', rawResponse)\n                    }\n                    break; \n                case \"Save Query\":\n                    var blob = new Blob([this.$store.getters.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n                    saveAs(blob, 'query.txt')\n                    break; \n                case \"Query Store\":\n                    this.$store.commit('queryStore')\n            }\n        }, \n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateSPARQLCode', e.target.result)\n            reader.readAsText(file)\n        },\n        saveQuery: function () {\n            let query = {id: this.$store.getters.savedQueries.length, queryText: this.$store.getters.SPARQLCode, queryResult: this.$store.getters.queryResult}\n            this.$store.commit('addQueryToSavedQueries', query)\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"],"sourceRoot":"src/components"}]}