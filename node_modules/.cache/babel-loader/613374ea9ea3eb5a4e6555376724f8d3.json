{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store.js","mtime":1593697785871},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKVnVlLnVzZShWdWV4KTsgLy8gY29uc3QgTjMgPSByZXF1aXJlKCduMycpOwovLyBjb25zdCByZGZzdG9yZSA9IG5ldyBOMy5TdG9yZSgpCgp2YXIgcmRmU3RvcmUgPSByZXF1aXJlKCdyZGZzdG9yZScpOwoKdmFyIHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoewogIHN0YXRlOiB7CiAgICAvLyBPdmVyYWxsIAogICAgY3VycmVudExhbmd1YWdlOiAnJywKICAgIC8vIEVycm9yIGhhbmRsaW5nICAKICAgIGVycm9yOiBmYWxzZSwKICAgIGVycm9yTWVzc2FnZTogJycsCiAgICAvLyBSREYgCiAgICB0dXJ0bGVDb2RlOiAnJywKICAgIHByZWZpeGVzOiBbXSwKICAgIHJkZnN0b3JlOiBuZXcgcmRmU3RvcmUuU3RvcmUoZnVuY3Rpb24gKGVyciwgc3RvcmUpIHsKICAgICAgLy8gdGhlIG5ldyBzdG9yZSBpcyByZWFkeQogICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICByZXR1cm4gc3RvcmU7CiAgICB9KSwKICAgIC8vIFNQQVJRTAogICAgU1BBUlFMQ29kZTogJycsCiAgICBqc29uUmVzcG9uc2U6ICcnLAogICAgLy8gUHJlZml4ZXMgCiAgICBzZWxlY3RlZFByZWZpeGVzOiBbXQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICB1cGRhdGVTUEFSUUxDb2RlOiBmdW5jdGlvbiB1cGRhdGVTUEFSUUxDb2RlKHN0YXRlLCBuZXdDb2RlKSB7CiAgICAgIHN0YXRlLlNQQVJRTENvZGUgPSBuZXdDb2RlOwogICAgfSwKICAgIHVwZGF0ZVR1cnRsZUNvZGU6IGZ1bmN0aW9uIHVwZGF0ZVR1cnRsZUNvZGUoc3RhdGUsIG5ld0NvZGUpIHsKICAgICAgc3RhdGUudHVydGxlQ29kZSA9IG5ld0NvZGU7CiAgICB9LAogICAgdXBkYXRlSlNPTlJlc3BvbnNlOiBmdW5jdGlvbiB1cGRhdGVKU09OUmVzcG9uc2Uoc3RhdGUsIG5ld1Jlc3BvbnNlKSB7CiAgICAgIHN0YXRlLmpzb25SZXNwb25zZSA9IG5ld1Jlc3BvbnNlOwogICAgfSwKICAgIGNoYW5nZUVycm9yOiBmdW5jdGlvbiBjaGFuZ2VFcnJvcihzdGF0ZSwgYm9vbGVhbikgewogICAgICBzdGF0ZS5lcnJvciA9IGJvb2xlYW47CiAgICB9LAogICAgdXBkYXRlRXJyb3JNZXNzYWdlOiBmdW5jdGlvbiB1cGRhdGVFcnJvck1lc3NhZ2Uoc3RhdGUsIGVycm9yTWVzc2FnZSkgewogICAgICBzdGF0ZS5lcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7CiAgICB9LAogICAgdXBkYXRlQ3VycmVudExhbmd1YWdlOiBmdW5jdGlvbiB1cGRhdGVDdXJyZW50TGFuZ3VhZ2Uoc3RhdGUsIG5ld0xhbmd1YWdlKSB7CiAgICAgIHN0YXRlLmN1cnJlbnRMYW5ndWFnZSA9IG5ld0xhbmd1YWdlOwogICAgfSwKICAgIGFkZFByZWZpeDogZnVuY3Rpb24gYWRkUHJlZml4KHN0YXRlLCBuZXdQcmVmaXgpIHsKICAgICAgc3RhdGUucHJlZml4ZXMucHVzaChuZXdQcmVmaXgpOwogICAgfSwKICAgIGNsZWFyVHVydGxlU3RvcmU6IGZ1bmN0aW9uIGNsZWFyVHVydGxlU3RvcmUoc3RhdGUpIHsKICAgICAgc3RhdGUucHJlZml4ZXMgPSBbXTsKICAgICAgc3RhdGUucmRmc3RvcmUgPSBuZXcgcmRmU3RvcmUuU3RvcmUoZnVuY3Rpb24gKGVyciwgc3RvcmUpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgIHJldHVybiBzdG9yZTsKICAgICAgfSk7CiAgICB9LAogICAgLy8gcG9wdWxhdGVSREZTdG9yZSAoc3RhdGUsIHF1YWQpewogICAgLy8gICBzdGF0ZS5yZGZzdG9yZS5hZGRRdWFkKHF1YWQpCiAgICAvLyB9LAogICAgbG9hZFJERjogZnVuY3Rpb24gbG9hZFJERihzdGF0ZSkgewogICAgICBzdGF0ZS5yZGZzdG9yZS5sb2FkKCJ0ZXh0L3R1cnRsZSIsIHN0YXRlLnR1cnRsZUNvZGUsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCiAgICB1cGRhdGVTZWxlY3RlZFByZWZpeGVzOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZFByZWZpeGVzKHN0YXRlLCBwcmVmaXhlcykgewogICAgICBzdGF0ZS5zZWxlY3RlZFByZWZpeGVzID0gcHJlZml4ZXM7CiAgICB9LAogICAgcXVlcnlTdG9yZTogZnVuY3Rpb24gcXVlcnlTdG9yZShzdGF0ZSkgewogICAgICBzdGF0ZS5yZGZzdG9yZS5leGVjdXRlKHN0YXRlLlNQQVJRTENvZGUpOwogICAgfQogIH0sCiAgZ2V0dGVyczogewogICAgU1BBUlFMQ29kZTogZnVuY3Rpb24gU1BBUlFMQ29kZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuU1BBUlFMQ29kZTsKICAgIH0sCiAgICBqc29uUmVzcG9uc2U6IGZ1bmN0aW9uIGpzb25SZXNwb25zZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuanNvblJlc3BvbnNlOwogICAgfSwKICAgIGVycm9yTWVzc2FnZTogZnVuY3Rpb24gZXJyb3JNZXNzYWdlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5lcnJvck1lc3NhZ2U7CiAgICB9LAogICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5lcnJvcjsKICAgIH0sCiAgICB0dXJ0bGVDb2RlOiBmdW5jdGlvbiB0dXJ0bGVDb2RlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS50dXJ0bGVDb2RlOwogICAgfSwKICAgIGN1cnJlbnRMYW5ndWFnZTogZnVuY3Rpb24gY3VycmVudExhbmd1YWdlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jdXJyZW50TGFuZ3VhZ2U7CiAgICB9LAogICAgcHJlZml4ZXM6IGZ1bmN0aW9uIHByZWZpeGVzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5wcmVmaXhlczsKICAgIH0sCiAgICByZGZzdG9yZTogZnVuY3Rpb24gcmRmc3RvcmUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnJkZnN0b3JlOwogICAgfSwKICAgIHNlbGVjdGVkUHJlZml4ZXM6IGZ1bmN0aW9uIHNlbGVjdGVkUHJlZml4ZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnNlbGVjdGVkUHJlZml4ZXM7CiAgICB9LAogICAgZmlsZVRleHQ6IGZ1bmN0aW9uIGZpbGVUZXh0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5maWxlVGV4dDsKICAgIH0KICB9Cn0pOwpleHBvcnQgZGVmYXVsdCBzdG9yZTs="},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store.js"],"names":["Vue","Vuex","use","rdfStore","require","store","Store","state","currentLanguage","error","errorMessage","turtleCode","prefixes","rdfstore","err","console","log","SPARQLCode","jsonResponse","selectedPrefixes","mutations","updateSPARQLCode","newCode","updateTurtleCode","updateJSONResponse","newResponse","changeError","boolean","updateErrorMessage","updateCurrentLanguage","newLanguage","addPrefix","newPrefix","push","clearTurtleStore","loadRDF","load","updateSelectedPrefixes","queryStore","execute","getters","fileText"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// const N3 = require('n3');\n// const rdfstore = new N3.Store()\nvar rdfStore = require('rdfstore');\n\nconst store = new Vuex.Store({\n  state: {\n    // Overall \n    currentLanguage: '', \n\n    // Error handling  \n    error: false,\n    errorMessage: '',\n\n    // RDF \n    turtleCode: '',\n    prefixes: [], \n    rdfstore: new rdfStore.Store(function(err, store) {\n      // the new store is ready\n      console.log(err)\n      return store \n    }),\n\n    // SPARQL\n    SPARQLCode: '',\n    jsonResponse: '',\n\n    // Prefixes \n    selectedPrefixes: []\n  },\n  mutations: {\n    updateSPARQLCode (state, newCode) {\n      state.SPARQLCode = newCode \n    },\n    updateTurtleCode (state, newCode) {\n      state.turtleCode = newCode\n    }, \n    updateJSONResponse (state, newResponse) {\n      state.jsonResponse = newResponse\n    },\n    changeError (state, boolean) {\n      state.error = boolean \n    },\n    updateErrorMessage (state, errorMessage) {\n      state.errorMessage = errorMessage\n    },\n    updateCurrentLanguage (state, newLanguage) {\n      state.currentLanguage = newLanguage\n    },\n    addPrefix (state, newPrefix) {\n      state.prefixes.push(newPrefix)\n    },\n    clearTurtleStore (state) {\n      state.prefixes = []\n      state.rdfstore = new rdfStore.Store(function(err, store) {\n        console.log(err)\n        return store\n      });\n    },\n    // populateRDFStore (state, quad){\n    //   state.rdfstore.addQuad(quad)\n    // },\n    loadRDF (state) {\n      state.rdfstore.load(\"text/turtle\", state.turtleCode, function(err){ console.log(err) })\n    }, \n    updateSelectedPrefixes (state, prefixes) {\n      state.selectedPrefixes = prefixes\n    },\n    queryStore (state) {\n      state.rdfstore.execute(state.SPARQLCode, )\n    }\n  },\n  getters: {\n      SPARQLCode: state => state.SPARQLCode,\n      jsonResponse: state => state.jsonResponse, \n      errorMessage: state => state.errorMessage,\n      error: state => state.error,\n      turtleCode: state => state.turtleCode, \n      currentLanguage: state => state.currentLanguage,\n      prefixes: state => state.prefixes,\n      rdfstore: state => state.rdfstore,\n      selectedPrefixes: state => state.selectedPrefixes,\n      fileText: state => state.fileText\n  }\n})\n\nexport default store "]}]}