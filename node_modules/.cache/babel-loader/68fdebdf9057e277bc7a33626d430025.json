{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/thread-loader/dist/cjs.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/rdfeditor.store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/rdfeditor.store.js","mtime":1599226795382},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/thread-loader/dist/cjs.js","mtime":1596446670016},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":1596446669078},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":1596446669324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyogU3RvcmUgbW9kdWxlIHRvIGhhbmRsZSBSREYgRWRpdG9yIGNvbXBvbmVudCBzdG9yZSAqLwp2YXIgcmRmc3RvcmUgPSByZXF1aXJlKCdyZGZzdG9yZScpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIC8vIEF0dHJpYnV0ZXMgb2YgdGhlIHJkZkVkaXRvciBjb21wb25lbnQgCiAgICB0dXJ0bGVDb2RlOiAnJywKICAgIHJkZnN0b3JlOiBuZXcgcmRmc3RvcmUuU3RvcmUoZnVuY3Rpb24gKGVycm9yLCBzdG9yZSkgewogICAgICBpZiAoIWVycm9yKSB7CiAgICAgICAgcmV0dXJuIHN0b3JlOwogICAgICB9CiAgICB9KSwKICAgIGVycm9yU3RhdHVzOiBmYWxzZSwKICAgIGVycm9yTWVzc2FnZTogJycsCiAgICBzdG9yZVNpemU6IDAKICB9LAogIGdldHRlcnM6IHsKICAgIC8vIGdldHRlcnMgYW5kIGNvbXB1dGVkIHByb3BzIG9mIHJkZkVkaXRvciAKICAgIGVycm9yU3RhdHVzOiBmdW5jdGlvbiBlcnJvclN0YXR1cyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuZXJyb3JTdGF0dXM7CiAgICB9LAogICAgZXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBlcnJvck1lc3NhZ2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmVycm9yTWVzc2FnZTsKICAgIH0sCiAgICB0dXJ0bGVDb2RlOiBmdW5jdGlvbiB0dXJ0bGVDb2RlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS50dXJ0bGVDb2RlOwogICAgfSwKICAgIHJlc3VsdHNSZWFkeTogZnVuY3Rpb24gcmVzdWx0c1JlYWR5KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5yZXN1bHRzUmVhZHk7CiAgICB9LAogICAgc3RvcmVTaXplOiBmdW5jdGlvbiBzdG9yZVNpemUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnN0b3JlU2l6ZTsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgLy8gYmFjay1lbmQgZnVuY3Rpb25zIAogICAgdXBkYXRlQ29kZTogZnVuY3Rpb24gdXBkYXRlQ29kZShzdGF0ZSwgbmV3Q29kZSkgewogICAgICBzdGF0ZS50dXJ0bGVDb2RlID0gbmV3Q29kZTsKICAgIH0sCiAgICB1cGRhdGVFcnJvcjogZnVuY3Rpb24gdXBkYXRlRXJyb3Ioc3RhdGUsIF9yZWYpIHsKICAgICAgdmFyIG5ld0Vycm9yU3RhdHVzID0gX3JlZi5uZXdFcnJvclN0YXR1cywKICAgICAgICAgIG5ld0Vycm9yTWVzc2FnZSA9IF9yZWYubmV3RXJyb3JNZXNzYWdlOwogICAgICBzdGF0ZS5lcnJvclN0YXR1cyA9IG5ld0Vycm9yU3RhdHVzLCBzdGF0ZS5lcnJvck1lc3NhZ2UgPSBuZXdFcnJvck1lc3NhZ2U7CiAgICB9LAogICAgbG9hZFJERjogZnVuY3Rpb24gbG9hZFJERihzdGF0ZSkgewogICAgICBzdGF0ZS5yZGZzdG9yZS5sb2FkKCJ0ZXh0L3R1cnRsZSIsIHN0YXRlLnR1cnRsZUNvZGUsIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0cykgewogICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgIHN0YXRlLnN0b3JlU2l6ZSA9IHJlc3VsdHM7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIHVwZGF0ZUNvZGU6IGZ1bmN0aW9uIHVwZGF0ZUNvZGUoX3JlZjIsIG5ld0NvZGUpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgY29tbWl0KCd1cGRhdGVDb2RlJywgbmV3Q29kZSk7CiAgICB9LAogICAgbG9hZFJERjogZnVuY3Rpb24gbG9hZFJERihfcmVmMykgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogICAgICBjb21taXQoJ2xvYWRSREYnKTsKICAgIH0sCiAgICBxdWVyeVN0b3JlOiBmdW5jdGlvbiBxdWVyeVN0b3JlKF9yZWY0LCBzcGFycWxDb2RlKSB7CiAgICAgIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLAogICAgICAgICAgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgICBzdGF0ZS5yZGZzdG9yZS5leGVjdXRlKHNwYXJxbENvZGUsIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0cykgewogICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgIGNvbW1pdCgnc3BhcnFsRWRpdG9yU3RvcmUvdXBkYXRlTG9jYWxSZXN1bHQnLCByZXN1bHRzLCB7CiAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/rdfeditor.store.js"],"names":["rdfstore","require","namespaced","state","turtleCode","Store","error","store","errorStatus","errorMessage","storeSize","getters","resultsReady","mutations","updateCode","newCode","updateError","newErrorStatus","newErrorMessage","loadRDF","load","results","actions","commit","queryStore","sparqlCode","execute","root"],"mappings":"AAAA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXC,EAAAA,KAAK,EAAE;AACH;AACAC,IAAAA,UAAU,EAAE,EAFT;AAGHJ,IAAAA,QAAQ,EAAE,IAAIA,QAAQ,CAACK,KAAb,CAAmB,UAASC,KAAT,EAAgBC,KAAhB,EAAsB;AAC/C,UAAI,CAACD,KAAL,EAAY;AACR,eAAOC,KAAP;AACH;AACJ,KAJS,CAHP;AAQHC,IAAAA,WAAW,EAAE,KARV;AASHC,IAAAA,YAAY,EAAE,EATX;AAUHC,IAAAA,SAAS,EAAE;AAVR,GAFI;AAcXC,EAAAA,OAAO,EAAE;AACL;AACAH,IAAAA,WAAW,EAAE,qBAAAL,KAAK;AAAA,aAAIA,KAAK,CAACK,WAAV;AAAA,KAFb;AAGLC,IAAAA,YAAY,EAAE,sBAAAN,KAAK;AAAA,aAAIA,KAAK,CAACM,YAAV;AAAA,KAHd;AAILL,IAAAA,UAAU,EAAE,oBAAAD,KAAK;AAAA,aAAIA,KAAK,CAACC,UAAV;AAAA,KAJZ;AAKLQ,IAAAA,YAAY,EAAE,sBAAAT,KAAK;AAAA,aAAIA,KAAK,CAACS,YAAV;AAAA,KALd;AAMLF,IAAAA,SAAS,EAAE,mBAAAP,KAAK;AAAA,aAAIA,KAAK,CAACO,SAAV;AAAA;AANX,GAdE;AAsBXG,EAAAA,SAAS,EAAE;AACP;AACAC,IAAAA,UAFO,sBAEKX,KAFL,EAEYY,OAFZ,EAEqB;AACxBZ,MAAAA,KAAK,CAACC,UAAN,GAAmBW,OAAnB;AACH,KAJM;AAKPC,IAAAA,WALO,uBAKMb,KALN,QAKgD;AAAA,UAAlCc,cAAkC,QAAlCA,cAAkC;AAAA,UAAlBC,eAAkB,QAAlBA,eAAkB;AACnDf,MAAAA,KAAK,CAACK,WAAN,GAAoBS,cAApB,EACAd,KAAK,CAACM,YAAN,GAAqBS,eADrB;AAEH,KARM;AASPC,IAAAA,OATO,mBASEhB,KATF,EASS;AACZA,MAAAA,KAAK,CAACH,QAAN,CAAeoB,IAAf,CAAoB,aAApB,EAAmCjB,KAAK,CAACC,UAAzC,EAAqD,UAASE,KAAT,EAAgBe,OAAhB,EAAwB;AACzE,YAAI,CAACf,KAAL,EAAY;AACRH,UAAAA,KAAK,CAACO,SAAN,GAAkBW,OAAlB;AACH;AACJ,OAJD;AAKH;AAfM,GAtBA;AAuCXC,EAAAA,OAAO,EAAE;AACLR,IAAAA,UAAU,EAAE,2BAAaC,OAAb,EAAyB;AAAA,UAAtBQ,MAAsB,SAAtBA,MAAsB;AACjCA,MAAAA,MAAM,CAAC,YAAD,EAAeR,OAAf,CAAN;AACH,KAHI;AAILI,IAAAA,OAAO,EAAE,wBAAc;AAAA,UAAZI,MAAY,SAAZA,MAAY;AACnBA,MAAAA,MAAM,CAAC,SAAD,CAAN;AACH,KANI;AAOLC,IAAAA,UAAU,EAAE,2BAAkBC,UAAlB,EAAiC;AAAA,UAA/BtB,KAA+B,SAA/BA,KAA+B;AAAA,UAAxBoB,MAAwB,SAAxBA,MAAwB;AACzCpB,MAAAA,KAAK,CAACH,QAAN,CAAe0B,OAAf,CAAuBD,UAAvB,EAAmC,UAASnB,KAAT,EAAgBe,OAAhB,EAAwB;AACvD,YAAI,CAACf,KAAL,EAAY;AACRiB,UAAAA,MAAM,CAAC,qCAAD,EAAwCF,OAAxC,EAAiD;AAACM,YAAAA,IAAI,EAAE;AAAP,WAAjD,CAAN;AACH;AACJ,OAJD;AAKH;AAbI;AAvCE,CAAf","sourcesContent":["/* Store module to handle RDF Editor component store */\n\nvar rdfstore = require('rdfstore')\n\nexport default {\n    namespaced: true,\n    state: {\n        // Attributes of the rdfEditor component \n        turtleCode: '',\n        rdfstore: new rdfstore.Store(function(error, store){\n            if (!error) {\n                return store\n            }\n        }), \n        errorStatus: false, \n        errorMessage: '',\n        storeSize: 0, \n    },\n    getters: {\n        // getters and computed props of rdfEditor \n        errorStatus: state => state.errorStatus, \n        errorMessage: state => state.errorMessage,\n        turtleCode: state => state.turtleCode,\n        resultsReady: state => state.resultsReady,\n        storeSize: state => state.storeSize\n    },\n    mutations: {\n        // back-end functions \n        updateCode (state, newCode) {\n            state.turtleCode = newCode \n        },\n        updateError (state, {newErrorStatus, newErrorMessage}) {\n            state.errorStatus = newErrorStatus, \n            state.errorMessage = newErrorMessage \n        },\n        loadRDF (state) {\n            state.rdfstore.load(\"text/turtle\", state.turtleCode, function(error, results){\n                if (!error) {\n                    state.storeSize = results \n                }\n            })\n        }\n    },\n    actions: {\n        updateCode: ({ commit }, newCode) => {\n            commit('updateCode', newCode) \n        },\n        loadRDF: ({commit}) => {\n            commit('loadRDF')\n        },\n        queryStore: ({state, commit}, sparqlCode) => {\n            state.rdfstore.execute(sparqlCode, function(error, results){\n                if (!error) {\n                    commit('sparqlEditorStore/updateLocalResult', results, {root: true})\n                }\n            })\n        }\n    }\n}"]}]}