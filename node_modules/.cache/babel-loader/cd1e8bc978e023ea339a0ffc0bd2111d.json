{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js","mtime":1599141274138},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":1596446669078},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":1596446669324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js"],"names":["makeQuery","sendQuery","saveAs","toolbox","namespaced","state","SPARQLCode","endpoint","errorStatus","errorMessage","remoteResult","cols","rows","remoteResultIsReady","remoteResultTime","remoteResultJSON","remoteResultXML","remoteResultCSV","localResult","localResultIsReady","localResultTime","exampleQueries","outputFormat","getters","remoteResultCols","remoteResultRows","localResultCols","localResultRows","mutations","updateCode","newCode","updateResponse","newResponse","jsonResponse","updateError","newErrorStatus","newErrorMessage","updateEndpoint","newEndpoint","updateRemoteResult","head","vars","i","results","bindings","length","entries","Object","row","j","push","value","updateLocalResult","newLocalResult","variables","updateLocalResultTime","newTime","updateRemoteResultTime","addPrefixToCode","payload","name","url","removePrefixFromCode","removeCode","code","replace","updateOutputFormat","newOutputFormat","updateRemoteResultJSON","JSON","stringify","updateRemoteResultXML","updateRemoteResultCSV","actions","commit","queryStore","dispatch","root","queryEndpoint","t0","performance","now","queryURL","rawResponse","parse","error","split","t1","Math","round","Number","EPSILON","saveQuery","console","log","blob","Blob","type","loadExampleQuery","queryFile"],"mappings":"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","sourcesContent":["import {makeQuery, sendQuery} from '@/scripts/remoteQuery.js'\nimport {saveAs} from 'file-saver'\nimport {toolbox} from '@/scripts/toolbox.js'\n\nexport default {\n    namespaced: true, \n    state: {\n        SPARQLCode: '', \n        endpoint: '', \n        errorStatus: false,\n        errorMessage: '', \n        // For SPARQL Editor only \n        remoteResult: {\n            cols: null,\n            rows: null\n        },\n        remoteResultIsReady: false,\n        remoteResultTime: 0, \n        remoteResultJSON: null, \n        remoteResultXML: null, \n        remoteResultCSV: null, \n        // For using SPARQL editor to query \"local\" RDF store \n        localResult: {\n            cols: null, \n            rows: null\n        },\n        localResultIsReady: false,\n        localResultTime: 0,\n        exampleQueries: toolbox,\n        outputFormat: 'Table', \n    }, \n    getters: {\n        SPARQLCode: state => state.SPARQLCode,\n        errorStatus: state => state.errorStatus,\n        errorMessage: state => state.errorMessage, \n        remoteResultCols: state => state.remoteResult.cols,\n        remoteResultRows: state => state.remoteResult.rows, \n        remoteResultIsReady: state => state.remoteResultIsReady,\n        remoteResultTime: state => state.remoteResultTime, \n        localResultCols: state => state.localResult.cols,\n        localResultRows: state => state.localResult.rows,\n        localResultIsReady: state => state.localResultIsReady,\n        localResultTime: state => state.localResultTime,\n        exampleQueries: state => state.exampleQueries,\n        outputFormat: state => state.outputFormat,\n        remoteResultJSON: state => state.remoteResultJSON, \n        remoteResultXML: state => state.remoteResultXML,\n        remoteResultCSV: state => state.remoteResultCSV\n    },\n    mutations: {\n        updateCode (state, newCode) {\n            state.SPARQLCode = newCode \n        },\n        updateResponse (state, newResponse) {\n            state.jsonResponse = newResponse\n        },\n        updateError (state, {newErrorStatus, newErrorMessage}) {\n            state.errorStatus = newErrorStatus\n            state.errorMessage = newErrorMessage\n        },\n        updateEndpoint (state, newEndpoint) {\n            state.endpoint = newEndpoint\n        },\n        updateRemoteResult (state, newResponse) {\n            // Get collumn headings i.e. variables \n            state.remoteResult.cols = newResponse.head.vars \n            \n            // Get row of data for output \n            var rows = []\n            for ( var i = 0; i< newResponse.results.bindings.length; i++) {\n                var entries = Object.entries(newResponse.results.bindings[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            state.remoteResult.rows = rows \n            state.remoteResultIsReady = true \n        },\n        updateLocalResult (state, newLocalResult) {\n            var variables = []\n            var entries = Object.entries(newLocalResult[0])\n            for (var i = 0; i < entries.length; i++) {\n                variables.push(entries[i][0])\n            }\n            state.localResult.cols = variables \n\n            var rows = []\n            for (i = 0; i < newLocalResult.length; i++) {\n                entries = Object.entries(newLocalResult[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            state.localResult.rows = rows \n\n            state.localResultIsReady = true \n        },\n        updateLocalResultTime (state, newTime) {\n            state.localResultTime = newTime \n        },\n        updateRemoteResultTime (state, newTime) {\n            state.remoteResultTime = newTime\n        },\n        addPrefixToCode (state, payload) {\n            state.SPARQLCode = 'PREFIX ' + payload.name + ': <' + payload.url + '>\\n' + state.SPARQLCode\n        },\n        removePrefixFromCode (state, payload) {\n            let removeCode = 'PREFIX ' + payload.name + ': <' + payload.url + '>\\n'\n            let code = state.SPARQLCode\n            state.SPARQLCode = code.replace(removeCode, '')\n        },\n        updateOutputFormat (state, newOutputFormat) {\n            state.outputFormat = newOutputFormat\n        },\n        updateRemoteResultJSON (state, newResponse) {\n            state.remoteResultJSON = JSON.stringify(newResponse)\n        },\n        updateRemoteResultXML(state, newResponse) {\n            state.remoteResultXML = newResponse\n        },\n        updateRemoteResultCSV(state, newResponse) {\n            state.remoteResultCSV = newResponse\n        }\n    },\n    actions: {\n        updateCode: ({commit}, newCode) => {\n            commit('updateCode', newCode)\n        },\n        queryStore: ({state, dispatch}) => {\n            dispatch('rdfEditorStore/queryStore', state.SPARQLCode, {root: true})\n        },\n        queryEndpoint: ({state, commit}) => {\n            var t0 = performance.now()\n            \n            state.remoteResultIsReady = false; \n\n            var queryURL = null\n            var rawResponse = null\n\n            switch (state.outputFormat) {\n                case 'Table':\n                    queryURL = makeQuery(state.SPARQLCode, state.endpoint, 'json')\n                    rawResponse = sendQuery(queryURL)\n                    try {\n                        commit('updateRemoteResult', JSON.parse(rawResponse))\n                        commit('updateError', {newErrorStatus: false, newErrorMessage: ''})\n                    } catch (error) {\n                        commit('updateError', {newErrorStatus: true, newErrorMessage: rawResponse.split(\"\\n\")[0]})\n                    }\n                    break;\n                case 'JSON':\n                    queryURL = makeQuery(state.SPARQLCode, state.endpoint, 'json')\n                    rawResponse = sendQuery(queryURL)\n                    try {\n                        commit('updateRemoteResultJSON', JSON.parse(rawResponse))\n                        commit('updateError', {newErrorStatus: false, newErrorMessage: ''})\n                    } catch (error) {\n                        commit('updateError', {newErrorStatus: true, newErrorMessage: rawResponse.split(\"\\n\")[0]})\n                    }\n                    break; \n                case 'XML':\n                    queryURL = makeQuery(state.SPARQLCode, state.endpoint, 'xml')\n                    rawResponse = sendQuery(queryURL)\n                    try {\n                        commit('updateRemoteResultXML', rawResponse)\n                        commit('updateError', {newErrorStatus: false, newErrorMessage: ''})\n                    } catch (error) {\n                        commit('updateError', {newErrorStatus: true, newErrorMessage: rawResponse.split(\"\\n\")[0]})\n                    }\n                    break;\n                case 'CSV':\n                    queryURL = makeQuery(state.SPARQLCode, state.endpoint, 'csv')\n                    rawResponse = sendQuery(queryURL)\n                    try {\n                        commit('updateRemoteResultCSV', rawResponse)\n                        commit('updateError', {newErrorStatus: false, newErrorMessage: ''})\n                    } catch (error) {\n                        commit('updateError', {newErrorStatus: true, newErrorMessage: rawResponse.split(\"\\n\")[0]})\n                    }\n                    break;\n            }\n            var t1 = performance.now()\n            commit('updateRemoteResultTime', (Math.round( (t1-t0) * 100 + Number.EPSILON ) / 100))\n        },\n        updateEndpoint: ({commit}, newEndpoint) => {\n            commit('updateEndpoint', newEndpoint)\n        },\n        saveQuery: ({state}) => {\n            console.log(state.SPARQLCode)\n            var blob = new Blob([state.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n            saveAs(blob, 'query.txt')\n        },\n        updateLocalResult: ({commit}, newLocalResult) => {\n            commit('updateLocalResult', newLocalResult)\n        },\n        addPrefixToCode: ({commit}, payload) => {\n            commit('addPrefixToCode', payload)\n        },\n        removePrefixFromCode: ({commit}, payload) => {\n            commit('removePrefixFromCode', payload)\n        },\n        loadExampleQuery: ({state, commit}, queryFile) => {\n            commit('updateCode', state.exampleQueries[queryFile])\n        },\n        updateOutputFormat: ({commit}, newOutputFormat) => {\n            commit('updateOutputFormat', newOutputFormat)\n        }\n    }\n}"]}]}