{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store.js","mtime":1594309191758},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKVnVlLnVzZShWdWV4KTsgLy8gY29uc3QgTjMgPSByZXF1aXJlKCduMycpOwovLyBjb25zdCByZGZzdG9yZSA9IG5ldyBOMy5TdG9yZSgpCgp2YXIgcmRmU3RvcmUgPSByZXF1aXJlKCdyZGZzdG9yZScpOwoKdmFyIHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoewogIHN0YXRlOiB7CiAgICAvLyBPdmVyYWxsIAogICAgY3VycmVudExhbmd1YWdlOiAnJywKICAgIC8vIEVycm9yIGhhbmRsaW5nICAKICAgIGVycm9yOiBmYWxzZSwKICAgIGVycm9yTWVzc2FnZTogJycsCiAgICAvLyBSREYgCiAgICB0dXJ0bGVDb2RlOiAnJywKICAgIHByZWZpeGVzOiBbXSwKICAgIHJkZnN0b3JlOiBuZXcgcmRmU3RvcmUuU3RvcmUoZnVuY3Rpb24gKGVyciwgc3RvcmUpIHsKICAgICAgLy8gdGhlIG5ldyBzdG9yZSBpcyByZWFkeQogICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICByZXR1cm4gc3RvcmU7CiAgICB9KSwKICAgIHN0b3JlUXVlcnlSZXN1bHQ6IFtdLAogICAgLy8gU1BBUlFMCiAgICBTUEFSUUxDb2RlOiAnJywKICAgIGpzb25SZXNwb25zZTogJycsCiAgICBzYXZlZFF1ZXJpZXM6IFtdLAogICAgLy8gUHJlZml4ZXMgCiAgICBzZWxlY3RlZFByZWZpeGVzOiBbXQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICB1cGRhdGVTUEFSUUxDb2RlOiBmdW5jdGlvbiB1cGRhdGVTUEFSUUxDb2RlKHN0YXRlLCBuZXdDb2RlKSB7CiAgICAgIHN0YXRlLlNQQVJRTENvZGUgPSBuZXdDb2RlOwogICAgfSwKICAgIHVwZGF0ZVR1cnRsZUNvZGU6IGZ1bmN0aW9uIHVwZGF0ZVR1cnRsZUNvZGUoc3RhdGUsIG5ld0NvZGUpIHsKICAgICAgc3RhdGUudHVydGxlQ29kZSA9IG5ld0NvZGU7CiAgICB9LAogICAgdXBkYXRlSlNPTlJlc3BvbnNlOiBmdW5jdGlvbiB1cGRhdGVKU09OUmVzcG9uc2Uoc3RhdGUsIG5ld1Jlc3BvbnNlKSB7CiAgICAgIHN0YXRlLmpzb25SZXNwb25zZSA9IG5ld1Jlc3BvbnNlOwogICAgfSwKICAgIGNoYW5nZUVycm9yOiBmdW5jdGlvbiBjaGFuZ2VFcnJvcihzdGF0ZSwgYm9vbGVhbikgewogICAgICBzdGF0ZS5lcnJvciA9IGJvb2xlYW47CiAgICB9LAogICAgdXBkYXRlRXJyb3JNZXNzYWdlOiBmdW5jdGlvbiB1cGRhdGVFcnJvck1lc3NhZ2Uoc3RhdGUsIGVycm9yTWVzc2FnZSkgewogICAgICBzdGF0ZS5lcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7CiAgICB9LAogICAgdXBkYXRlQ3VycmVudExhbmd1YWdlOiBmdW5jdGlvbiB1cGRhdGVDdXJyZW50TGFuZ3VhZ2Uoc3RhdGUsIG5ld0xhbmd1YWdlKSB7CiAgICAgIHN0YXRlLmN1cnJlbnRMYW5ndWFnZSA9IG5ld0xhbmd1YWdlOwogICAgfSwKICAgIGFkZFByZWZpeDogZnVuY3Rpb24gYWRkUHJlZml4KHN0YXRlLCBuZXdQcmVmaXgpIHsKICAgICAgc3RhdGUucHJlZml4ZXMucHVzaChuZXdQcmVmaXgpOwogICAgfSwKICAgIGNsZWFyVHVydGxlU3RvcmU6IGZ1bmN0aW9uIGNsZWFyVHVydGxlU3RvcmUoc3RhdGUpIHsKICAgICAgc3RhdGUucHJlZml4ZXMgPSBbXTsKICAgICAgc3RhdGUucmRmc3RvcmUgPSBuZXcgcmRmU3RvcmUuU3RvcmUoZnVuY3Rpb24gKGVyciwgc3RvcmUpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgIHJldHVybiBzdG9yZTsKICAgICAgfSk7CiAgICB9LAogICAgbG9hZFJERjogZnVuY3Rpb24gbG9hZFJERihzdGF0ZSkgewogICAgICBzdGF0ZS5yZGZzdG9yZS5sb2FkKCJ0ZXh0L3R1cnRsZSIsIHN0YXRlLnR1cnRsZUNvZGUsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCiAgICB1cGRhdGVTZWxlY3RlZFByZWZpeGVzOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZFByZWZpeGVzKHN0YXRlLCBwcmVmaXhlcykgewogICAgICBzdGF0ZS5zZWxlY3RlZFByZWZpeGVzID0gcHJlZml4ZXM7CiAgICB9LAogICAgcXVlcnlTdG9yZTogZnVuY3Rpb24gcXVlcnlTdG9yZShzdGF0ZSkgewogICAgICBzdGF0ZS5yZGZzdG9yZS5leGVjdXRlKHN0YXRlLlNQQVJRTENvZGUsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGF0ZS5zdG9yZVF1ZXJ5UmVzdWx0ID0gcmVzdWx0czsKICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLnN0b3JlUXVlcnlSZXN1bHQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBTUEFSUUxDb2RlOiBmdW5jdGlvbiBTUEFSUUxDb2RlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5TUEFSUUxDb2RlOwogICAgfSwKICAgIGpzb25SZXNwb25zZTogZnVuY3Rpb24ganNvblJlc3BvbnNlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5qc29uUmVzcG9uc2U7CiAgICB9LAogICAgZXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBlcnJvck1lc3NhZ2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmVycm9yTWVzc2FnZTsKICAgIH0sCiAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3Ioc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmVycm9yOwogICAgfSwKICAgIHR1cnRsZUNvZGU6IGZ1bmN0aW9uIHR1cnRsZUNvZGUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnR1cnRsZUNvZGU7CiAgICB9LAogICAgY3VycmVudExhbmd1YWdlOiBmdW5jdGlvbiBjdXJyZW50TGFuZ3VhZ2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRMYW5ndWFnZTsKICAgIH0sCiAgICBwcmVmaXhlczogZnVuY3Rpb24gcHJlZml4ZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnByZWZpeGVzOwogICAgfSwKICAgIHJkZnN0b3JlOiBmdW5jdGlvbiByZGZzdG9yZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUucmRmc3RvcmU7CiAgICB9LAogICAgc2VsZWN0ZWRQcmVmaXhlczogZnVuY3Rpb24gc2VsZWN0ZWRQcmVmaXhlcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuc2VsZWN0ZWRQcmVmaXhlczsKICAgIH0sCiAgICBmaWxlVGV4dDogZnVuY3Rpb24gZmlsZVRleHQoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmZpbGVUZXh0OwogICAgfSwKICAgIHN0b3JlUXVlcnlSZXN1bHQ6IGZ1bmN0aW9uIHN0b3JlUXVlcnlSZXN1bHQoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnN0b3JlUXVlcnlSZXN1bHQ7CiAgICB9LAogICAgc2F2ZWRRdWVyaWVzOiBmdW5jdGlvbiBzYXZlZFF1ZXJpZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnNhdmVkUXVlcmllczsKICAgIH0KICB9Cn0pOwpleHBvcnQgZGVmYXVsdCBzdG9yZTs="},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store.js"],"names":["Vue","Vuex","use","rdfStore","require","store","Store","state","currentLanguage","error","errorMessage","turtleCode","prefixes","rdfstore","err","console","log","storeQueryResult","SPARQLCode","jsonResponse","savedQueries","selectedPrefixes","mutations","updateSPARQLCode","newCode","updateTurtleCode","updateJSONResponse","newResponse","changeError","boolean","updateErrorMessage","updateCurrentLanguage","newLanguage","addPrefix","newPrefix","push","clearTurtleStore","loadRDF","load","updateSelectedPrefixes","queryStore","execute","results","getters","fileText"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// const N3 = require('n3');\n// const rdfstore = new N3.Store()\nvar rdfStore = require('rdfstore');\n\nconst store = new Vuex.Store({\n  state: {\n    // Overall \n    currentLanguage: '', \n\n    // Error handling  \n    error: false,\n    errorMessage: '',\n\n    // RDF \n    turtleCode: '',\n    prefixes: [], \n    rdfstore: new rdfStore.Store(function(err, store) {\n      // the new store is ready\n      console.log(err)\n      return store \n    }),\n    storeQueryResult: [], \n\n    // SPARQL\n    SPARQLCode: '',\n    jsonResponse: '',\n    savedQueries: [], \n    // Prefixes \n    selectedPrefixes: []\n  },\n  mutations: {\n    updateSPARQLCode (state, newCode) {\n      state.SPARQLCode = newCode \n    },\n    updateTurtleCode (state, newCode) {\n      state.turtleCode = newCode\n    }, \n    updateJSONResponse (state, newResponse) {\n      state.jsonResponse = newResponse\n    },\n    changeError (state, boolean) {\n      state.error = boolean \n    },\n    updateErrorMessage (state, errorMessage) {\n      state.errorMessage = errorMessage\n    },\n    updateCurrentLanguage (state, newLanguage) {\n      state.currentLanguage = newLanguage\n    },\n    addPrefix (state, newPrefix) {\n      state.prefixes.push(newPrefix)\n    },\n    clearTurtleStore (state) {\n      state.prefixes = []\n      state.rdfstore = new rdfStore.Store(function(err, store) {\n        console.log(err)\n        return store\n      });\n    },\n    loadRDF (state) {\n      state.rdfstore.load(\"text/turtle\", state.turtleCode, function(err){ console.log(err) })\n    }, \n    updateSelectedPrefixes (state, prefixes) {\n      state.selectedPrefixes = prefixes\n    },\n    queryStore (state) {\n      state.rdfstore.execute(state.SPARQLCode, function(err,results) {\n        if (err) {\n          console.log(err)\n        } else {\n          state.storeQueryResult = results \n          console.log(state.storeQueryResult)\n        }\n      })\n    }\n  },\n  getters: {\n      SPARQLCode: state => state.SPARQLCode,\n      jsonResponse: state => state.jsonResponse, \n      errorMessage: state => state.errorMessage,\n      error: state => state.error,\n      turtleCode: state => state.turtleCode, \n      currentLanguage: state => state.currentLanguage,\n      prefixes: state => state.prefixes,\n      rdfstore: state => state.rdfstore,\n      selectedPrefixes: state => state.selectedPrefixes,\n      fileText: state => state.fileText,\n      storeQueryResult: state  => state.storeQueryResult,\n      savedQueries: state => state.savedQueries\n  }\n})\n\nexport default store "]}]}