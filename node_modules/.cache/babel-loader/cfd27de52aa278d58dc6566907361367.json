{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store.db.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store.db.js","mtime":1594294101739},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store.db.js"],"names":["DB_NAME","DB_VERSION","rdfStore","require","db","namespaced","state","ready","queries","rdfstore","mutations","created","getDb","getCatsFromDb","getGraphFromDb","addGraph","rdf","Store","err","store","load","console","log","addGraphToDb","rdfgraph","Promise","resolve","trans","transaction","oncomplete","e","objectStore","add","deleteGraph","id","delete","graph","openCursor","onsuccess","cursor","target","result","value","continue","reject","request","window","indexedDB","open","onerror","onupgradeneeded","createdObjectStore","autoIncrement","keyPath","getters"],"mappings":"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","sourcesContent":["// Vue.config.productionTip = false;\n// Vue.config.devtools = false;\n\nconst DB_NAME = 'db';\nconst DB_VERSION = 1;\n\nvar rdfStore = require('rdfstore')\n\nconst db = {\n    namespaced: true,\n    state: () => ({\n      db: null,\n      ready: false,\n      queries: [],\n      rdfstore: null,\n    }),\n    mutations: {\n      async created(state) {\n        state.db = await state.getDb()\n        state.queries = await state.getCatsFromDb()\n        state.rdfstore = await state.getGraphFromDb()\n        state.ready = true \n      }, \n      async addGraph(state, rdf) {\n        // Create new rdfStore instance \n        let rdfstore = new rdfStore.Store(function(err, store) {\n          if (!err) {\n            return store \n          }\n        })\n        // Given turtle data, load data to rdfstore \n        rdfstore.load(\"text/turtle\", rdf, function(err) {\n          if (err) {\n            console.log(err)\n          }\n        })\n        await state.addGraphToDb(rdfstore)\n        state.rdfstore = await state.getGraphFromDb()\n      },\n      async addGraphToDb(state, rdfgraph) {\n        return new Promise((resolve) => {\n          let trans = state.db.transaction(['graphs'],'readwrite');\n          trans.oncomplete = e => {\n            console.log(e)\n            resolve();\n          };\n  \n          let store = trans.objectStore('graphs');\n          store.add(rdfgraph);\n  \n        });\n      }, \n      async deleteGraph(state, id) {\n        return new Promise((resolve) => {\n          let trans = state.db.transaction(['graphs'],'readwrite');\n          trans.oncomplete = e => {\n            console.log(e)\n            resolve();\n          };\n  \n          let store = trans.objectStore('graphs');\n          store.delete(id);\n        });\n      }, \n      async getGraphFromDb(state) {\n        return new Promise((resolve) => {\n          let trans = state.db.transaction(['graph'], 'readonly')\n\n          trans.oncomplete = e => {\n            console.log(e)\n            resolve(graph)\n          }\n\n          let store = trans.objectStore('graph')\n          let graph = null \n\n          store.openCursor().onsuccess = e => {\n            let cursor = e.target.result\n            if (cursor) {\n              graph = cursor.value\n              cursor.continue()\n            }\n          }\n        })\n      },\n      // async addQuery(state, query) {\n\n      // },\n      // async deleteQuery(state) {\n\n      // },\n      // async addQueryToDb(state, query) {\n\n      // },\n      // async deleteQueryFromDb(state, id) {\n\n      // },\n      // async getQueriesFromDb(state) {\n      //   return new Promise((resolve, reject) => {\n      //     let trans = state.db.transaction(['queries'], 'readonly')\n\n      //     trans.oncomplete = e => {\n      //       resolve(queries)\n      //     }\n\n      //     let store = trans.objectStore('queries')\n      //     let queries = []\n\n      //     store.openCursor().onsuccess = e => {\n      //       let cursor = e.target.result\n      //       if (cursor) {\n      //         queries.push(cursor.value)\n      //         cursor.continue()\n      //       }\n      //     }\n      //   })\n      // },\n      async getDb() {\n        return new Promise((resolve, reject) => {\n          let request = window.indexedDB.open(DB_NAME, DB_VERSION)\n\n          request.onerror = e => {\n            console.log('Error opening db', e)\n            reject('Error')\n          }\n\n          request.onsuccess = e => {\n            resolve(e.target.result)\n          }\n\n          request.onupgradeneeded = e => {\n            console.log('onupgradeneeded')\n            let db = e.target.result\n            // let queriesStore = db.createdObjectStore(\"queries\", { autoIncrement: true, keyPath: 'id' })\n            let rdfStore = db.createdObjectStore(\"graphs\", { autoIncrement: true, keyPath: 'id'})\n            console.log(rdfStore)\n          }\n        })\n      },\n    },\n    getters: {\n      \n    }\n}\n\nexport default {db}"]}]}