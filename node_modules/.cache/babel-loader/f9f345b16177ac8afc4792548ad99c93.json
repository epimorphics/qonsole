{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store.js","mtime":1593610652900},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKVnVlLnVzZShWdWV4KTsKCnZhciBOMyA9IHJlcXVpcmUoJ24zJyk7IC8vIGNvbnN0IHJkZnN0b3JlID0gbmV3IE4zLlN0b3JlKCkKCgp2YXIgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7CiAgc3RhdGU6IHsKICAgIC8vIE92ZXJhbGwgCiAgICBjdXJyZW50TGFuZ3VhZ2U6ICcnLAogICAgLy8gRXJyb3IgaGFuZGxpbmcgIAogICAgZXJyb3I6IGZhbHNlLAogICAgZXJyb3JNZXNzYWdlOiAnJywKICAgIC8vIFJERiAKICAgIHR1cnRsZUNvZGU6ICcnLAogICAgcHJlZml4ZXM6IFtdLAogICAgcmRmc3RvcmU6IG5ldyBOMy5TdG9yZSgpLAogICAgLy8gU1BBUlFMCiAgICBTUEFSUUxDb2RlOiAnJywKICAgIGpzb25SZXNwb25zZTogJycsCiAgICAvLyBQcmVmaXhlcyAKICAgIHNlbGVjdGVkUHJlZml4ZXM6IFtdCiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHVwZGF0ZVNQQVJRTENvZGU6IGZ1bmN0aW9uIHVwZGF0ZVNQQVJRTENvZGUoc3RhdGUsIG5ld0NvZGUpIHsKICAgICAgc3RhdGUuU1BBUlFMQ29kZSA9IG5ld0NvZGU7CiAgICB9LAogICAgdXBkYXRlVHVydGxlQ29kZTogZnVuY3Rpb24gdXBkYXRlVHVydGxlQ29kZShzdGF0ZSwgbmV3Q29kZSkgewogICAgICBzdGF0ZS50dXJ0bGVDb2RlID0gbmV3Q29kZTsKICAgIH0sCiAgICB1cGRhdGVKU09OUmVzcG9uc2U6IGZ1bmN0aW9uIHVwZGF0ZUpTT05SZXNwb25zZShzdGF0ZSwgbmV3UmVzcG9uc2UpIHsKICAgICAgc3RhdGUuanNvblJlc3BvbnNlID0gbmV3UmVzcG9uc2U7CiAgICB9LAogICAgY2hhbmdlRXJyb3I6IGZ1bmN0aW9uIGNoYW5nZUVycm9yKHN0YXRlLCBib29sZWFuKSB7CiAgICAgIHN0YXRlLmVycm9yID0gYm9vbGVhbjsKICAgIH0sCiAgICB1cGRhdGVFcnJvck1lc3NhZ2U6IGZ1bmN0aW9uIHVwZGF0ZUVycm9yTWVzc2FnZShzdGF0ZSwgZXJyb3JNZXNzYWdlKSB7CiAgICAgIHN0YXRlLmVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZTsKICAgIH0sCiAgICB1cGRhdGVDdXJyZW50TGFuZ3VhZ2U6IGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbnRMYW5ndWFnZShzdGF0ZSwgbmV3TGFuZ3VhZ2UpIHsKICAgICAgc3RhdGUuY3VycmVudExhbmd1YWdlID0gbmV3TGFuZ3VhZ2U7CiAgICB9LAogICAgYWRkUHJlZml4OiBmdW5jdGlvbiBhZGRQcmVmaXgoc3RhdGUsIG5ld1ByZWZpeCkgewogICAgICBzdGF0ZS5wcmVmaXhlcy5wdXNoKG5ld1ByZWZpeCk7CiAgICB9LAogICAgY2xlYXJUdXJ0bGVTdG9yZTogZnVuY3Rpb24gY2xlYXJUdXJ0bGVTdG9yZShzdGF0ZSkgewogICAgICBzdGF0ZS5wcmVmaXhlcyA9IFtdOwogICAgICBzdGF0ZS5yZGZzdG9yZSA9IG5ldyBOMy5TdG9yZSgpOwogICAgfSwKICAgIHBvcHVsYXRlUkRGU3RvcmU6IGZ1bmN0aW9uIHBvcHVsYXRlUkRGU3RvcmUoc3RhdGUsIHF1YWQpIHsKICAgICAgc3RhdGUucmRmc3RvcmUuYWRkUXVhZChxdWFkKTsKICAgIH0sCiAgICB1cGRhdGVTZWxlY3RlZFByZWZpeGVzOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZFByZWZpeGVzKHN0YXRlLCBwcmVmaXhlcykgewogICAgICBzdGF0ZS5zZWxlY3RlZFByZWZpeGVzID0gcHJlZml4ZXM7CiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBTUEFSUUxDb2RlOiBmdW5jdGlvbiBTUEFSUUxDb2RlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5TUEFSUUxDb2RlOwogICAgfSwKICAgIGpzb25SZXNwb25zZTogZnVuY3Rpb24ganNvblJlc3BvbnNlKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5qc29uUmVzcG9uc2U7CiAgICB9LAogICAgZXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBlcnJvck1lc3NhZ2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmVycm9yTWVzc2FnZTsKICAgIH0sCiAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3Ioc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmVycm9yOwogICAgfSwKICAgIHR1cnRsZUNvZGU6IGZ1bmN0aW9uIHR1cnRsZUNvZGUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnR1cnRsZUNvZGU7CiAgICB9LAogICAgY3VycmVudExhbmd1YWdlOiBmdW5jdGlvbiBjdXJyZW50TGFuZ3VhZ2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRMYW5ndWFnZTsKICAgIH0sCiAgICBwcmVmaXhlczogZnVuY3Rpb24gcHJlZml4ZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnByZWZpeGVzOwogICAgfSwKICAgIHJkZnN0b3JlOiBmdW5jdGlvbiByZGZzdG9yZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUucmRmc3RvcmU7CiAgICB9LAogICAgc2VsZWN0ZWRQcmVmaXhlczogZnVuY3Rpb24gc2VsZWN0ZWRQcmVmaXhlcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuc2VsZWN0ZWRQcmVmaXhlczsKICAgIH0KICB9Cn0pOwpleHBvcnQgZGVmYXVsdCBzdG9yZTs="},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store.js"],"names":["Vue","Vuex","use","N3","require","store","Store","state","currentLanguage","error","errorMessage","turtleCode","prefixes","rdfstore","SPARQLCode","jsonResponse","selectedPrefixes","mutations","updateSPARQLCode","newCode","updateTurtleCode","updateJSONResponse","newResponse","changeError","boolean","updateErrorMessage","updateCurrentLanguage","newLanguage","addPrefix","newPrefix","push","clearTurtleStore","populateRDFStore","quad","addQuad","updateSelectedPrefixes","getters"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst N3 = require('n3');\n// const rdfstore = new N3.Store()\n\nconst store = new Vuex.Store({\n  state: {\n    // Overall \n    currentLanguage: '', \n\n    // Error handling  \n    error: false,\n    errorMessage: '',\n\n    // RDF \n    turtleCode: '',\n    prefixes: [], \n    rdfstore: new N3.Store(),\n\n    // SPARQL\n    SPARQLCode: '',\n    jsonResponse: '',\n\n    // Prefixes \n    selectedPrefixes: []\n  },\n  mutations: {\n    updateSPARQLCode (state, newCode) {\n      state.SPARQLCode = newCode \n    },\n    updateTurtleCode (state, newCode) {\n      state.turtleCode = newCode\n    }, \n    updateJSONResponse (state, newResponse) {\n      state.jsonResponse = newResponse\n    },\n    changeError (state, boolean) {\n      state.error = boolean \n    },\n    updateErrorMessage (state, errorMessage) {\n      state.errorMessage = errorMessage\n    },\n    updateCurrentLanguage (state, newLanguage) {\n      state.currentLanguage = newLanguage\n    },\n    addPrefix (state, newPrefix) {\n      state.prefixes.push(newPrefix)\n    },\n    clearTurtleStore (state) {\n      state.prefixes = []\n      state.rdfstore = new N3.Store()\n    },\n    populateRDFStore (state, quad){\n      state.rdfstore.addQuad(quad)\n    },\n    updateSelectedPrefixes (state, prefixes) {\n      state.selectedPrefixes = prefixes\n    }\n  },\n  getters: {\n      SPARQLCode: state => state.SPARQLCode,\n      jsonResponse: state => state.jsonResponse, \n      errorMessage: state => state.errorMessage,\n      error: state => state.error,\n      turtleCode: state => state.turtleCode, \n      currentLanguage: state => state.currentLanguage,\n      prefixes: state => state.prefixes,\n      rdfstore: state => state.rdfstore,\n      selectedPrefixes: state => state.selectedPrefixes\n  }\n})\n\nexport default store "]}]}