{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js!/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js??ref--13-0!/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js","mtime":1598543392843},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":1596446669078},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/eslint-loader/index.js","mtime":1596446669324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0IHsgbWFrZVF1ZXJ5LCBzZW5kUXVlcnkgfSBmcm9tICdAL3NjcmlwdHMvcmVtb3RlUXVlcnkuanMnOwppbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIFNQQVJRTENvZGU6ICcnLAogICAgZW5kcG9pbnQ6ICcnLAogICAgZXJyb3JTdGF0dXM6IGZhbHNlLAogICAgZXJyb3JNZXNzYWdlOiAnJywKICAgIHJlc3VsdFR5cGU6ICdKU09OJywKICAgIC8vIEZvciBTUEFSUUwgRWRpdG9yIG9ubHkgCiAgICByZW1vdGVSZXN1bHQ6IHsKICAgICAgY29sczogbnVsbCwKICAgICAgcm93czogbnVsbAogICAgfSwKICAgIHJlbW90ZVJlc3VsdElzUmVhZHk6IGZhbHNlLAogICAgcmVtb3RlUmVzdWx0VGltZTogMCwKICAgIC8vIEZvciB1c2luZyBTUEFSUUwgZWRpdG9yIHRvIHF1ZXJ5ICJsb2NhbCIgUkRGIHN0b3JlIAogICAgbG9jYWxSZXN1bHQ6IHsKICAgICAgY29sczogbnVsbCwKICAgICAgcm93czogbnVsbAogICAgfSwKICAgIGxvY2FsUmVzdWx0SXNSZWFkeTogZmFsc2UsCiAgICBsb2NhbFJlc3VsdFRpbWU6IDAKICB9LAogIGdldHRlcnM6IHsKICAgIFNQQVJRTENvZGU6IGZ1bmN0aW9uIFNQQVJRTENvZGUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLlNQQVJRTENvZGU7CiAgICB9LAogICAgZXJyb3JTdGF0dXM6IGZ1bmN0aW9uIGVycm9yU3RhdHVzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5lcnJvclN0YXR1czsKICAgIH0sCiAgICBlcnJvck1lc3NhZ2U6IGZ1bmN0aW9uIGVycm9yTWVzc2FnZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuZXJyb3JNZXNzYWdlOwogICAgfSwKICAgIHJlbW90ZVJlc3VsdENvbHM6IGZ1bmN0aW9uIHJlbW90ZVJlc3VsdENvbHMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnJlbW90ZVJlc3VsdC5jb2xzOwogICAgfSwKICAgIHJlbW90ZVJlc3VsdFJvd3M6IGZ1bmN0aW9uIHJlbW90ZVJlc3VsdFJvd3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnJlbW90ZVJlc3VsdC5yb3dzOwogICAgfSwKICAgIHJlbW90ZVJlc3VsdElzUmVhZHk6IGZ1bmN0aW9uIHJlbW90ZVJlc3VsdElzUmVhZHkoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnJlbW90ZVJlc3VsdElzUmVhZHk7CiAgICB9LAogICAgcmVtb3RlUmVzdWx0VGltZTogZnVuY3Rpb24gcmVtb3RlUmVzdWx0VGltZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUucmVtb3RlUmVzdWx0VGltZTsKICAgIH0sCiAgICBsb2NhbFJlc3VsdENvbHM6IGZ1bmN0aW9uIGxvY2FsUmVzdWx0Q29scyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubG9jYWxSZXN1bHQuY29sczsKICAgIH0sCiAgICBsb2NhbFJlc3VsdFJvd3M6IGZ1bmN0aW9uIGxvY2FsUmVzdWx0Um93cyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubG9jYWxSZXN1bHQucm93czsKICAgIH0sCiAgICBsb2NhbFJlc3VsdElzUmVhZHk6IGZ1bmN0aW9uIGxvY2FsUmVzdWx0SXNSZWFkeShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubG9jYWxSZXN1bHRJc1JlYWR5OwogICAgfSwKICAgIGxvY2FsUmVzdWx0VGltZTogZnVuY3Rpb24gbG9jYWxSZXN1bHRUaW1lKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5sb2NhbFJlc3VsdFRpbWU7CiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHVwZGF0ZUNvZGU6IGZ1bmN0aW9uIHVwZGF0ZUNvZGUoc3RhdGUsIG5ld0NvZGUpIHsKICAgICAgc3RhdGUuU1BBUlFMQ29kZSA9IG5ld0NvZGU7CiAgICB9LAogICAgdXBkYXRlUmVzcG9uc2U6IGZ1bmN0aW9uIHVwZGF0ZVJlc3BvbnNlKHN0YXRlLCBuZXdSZXNwb25zZSkgewogICAgICBzdGF0ZS5qc29uUmVzcG9uc2UgPSBuZXdSZXNwb25zZTsKICAgICAgY29uc29sZS5sb2coc3RhdGUuanNvblJlc3BvbnNlKTsKICAgIH0sCiAgICB1cGRhdGVFcnJvcjogZnVuY3Rpb24gdXBkYXRlRXJyb3Ioc3RhdGUsIF9yZWYpIHsKICAgICAgdmFyIG5ld0Vycm9yU3RhdHVzID0gX3JlZi5uZXdFcnJvclN0YXR1cywKICAgICAgICAgIG5ld0Vycm9yTWVzc2FnZSA9IF9yZWYubmV3RXJyb3JNZXNzYWdlOwogICAgICBzdGF0ZS5lcnJvclN0YXR1cyA9IG5ld0Vycm9yU3RhdHVzOwogICAgICBzdGF0ZS5lcnJvck1lc3NhZ2UgPSBuZXdFcnJvck1lc3NhZ2U7CiAgICB9LAogICAgdXBkYXRlRW5kcG9pbnQ6IGZ1bmN0aW9uIHVwZGF0ZUVuZHBvaW50KHN0YXRlLCBuZXdFbmRwb2ludCkgewogICAgICBzdGF0ZS5lbmRwb2ludCA9IG5ld0VuZHBvaW50OwogICAgfSwKICAgIHVwZGF0ZVJlbW90ZVJlc3VsdDogZnVuY3Rpb24gdXBkYXRlUmVtb3RlUmVzdWx0KHN0YXRlLCBuZXdSZXNwb25zZSkgewogICAgICAvLyBHZXQgY29sbHVtbiBoZWFkaW5ncyBpLmUuIHZhcmlhYmxlcyAKICAgICAgc3RhdGUucmVtb3RlUmVzdWx0LmNvbHMgPSBuZXdSZXNwb25zZS5oZWFkLnZhcnM7IC8vIEdldCByb3cgb2YgZGF0YSBmb3Igb3V0cHV0IAoKICAgICAgdmFyIHJvd3MgPSBbXTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3UmVzcG9uc2UucmVzdWx0cy5iaW5kaW5ncy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMobmV3UmVzcG9uc2UucmVzdWx0cy5iaW5kaW5nc1tpXSk7CiAgICAgICAgdmFyIHJvdyA9IFtdOwoKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVudHJpZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIHJvdy5wdXNoKGVudHJpZXNbal1bMV0udmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgcm93cy5wdXNoKHJvdyk7CiAgICAgIH0KCiAgICAgIHN0YXRlLnJlbW90ZVJlc3VsdC5yb3dzID0gcm93czsKICAgICAgc3RhdGUucmVtb3RlUmVzdWx0SXNSZWFkeSA9IHRydWU7CiAgICB9LAogICAgdXBkYXRlTG9jYWxSZXN1bHQ6IGZ1bmN0aW9uIHVwZGF0ZUxvY2FsUmVzdWx0KHN0YXRlLCBuZXdMb2NhbFJlc3VsdCkgewogICAgICB2YXIgdmFyaWFibGVzID0gW107CiAgICAgIHZhciBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMobmV3TG9jYWxSZXN1bHRbMF0pOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyaWFibGVzLnB1c2goZW50cmllc1tpXVswXSk7CiAgICAgIH0KCiAgICAgIHN0YXRlLmxvY2FsUmVzdWx0LmNvbHMgPSB2YXJpYWJsZXM7CiAgICAgIHZhciByb3dzID0gW107CgogICAgICBmb3IgKGkgPSAwOyBpIDwgbmV3TG9jYWxSZXN1bHQubGVuZ3RoOyBpKyspIHsKICAgICAgICBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMobmV3TG9jYWxSZXN1bHRbaV0pOwogICAgICAgIHZhciByb3cgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbnRyaWVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICByb3cucHVzaChlbnRyaWVzW2pdWzFdLnZhbHVlKTsKICAgICAgICB9CgogICAgICAgIHJvd3MucHVzaChyb3cpOwogICAgICB9CgogICAgICBzdGF0ZS5sb2NhbFJlc3VsdC5yb3dzID0gcm93czsKICAgICAgc3RhdGUubG9jYWxSZXN1bHRJc1JlYWR5ID0gdHJ1ZTsKICAgIH0sCiAgICB1cGRhdGVMb2NhbFJlc3VsdFRpbWU6IGZ1bmN0aW9uIHVwZGF0ZUxvY2FsUmVzdWx0VGltZShzdGF0ZSwgbmV3VGltZSkgewogICAgICBzdGF0ZS5sb2NhbFJlc3VsdFRpbWUgPSBuZXdUaW1lOwogICAgfSwKICAgIHVwZGF0ZVJlbW90ZVJlc3VsdFRpbWU6IGZ1bmN0aW9uIHVwZGF0ZVJlbW90ZVJlc3VsdFRpbWUoc3RhdGUsIG5ld1RpbWUpIHsKICAgICAgc3RhdGUucmVtb3RlUmVzdWx0VGltZSA9IG5ld1RpbWU7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICB1cGRhdGVDb2RlOiBmdW5jdGlvbiB1cGRhdGVDb2RlKF9yZWYyLCBuZXdDb2RlKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgIGNvbW1pdCgndXBkYXRlQ29kZScsIG5ld0NvZGUpOwogICAgfSwKICAgIHF1ZXJ5U3RvcmU6IGZ1bmN0aW9uIHF1ZXJ5U3RvcmUoX3JlZjMpIHsKICAgICAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGUsCiAgICAgICAgICBkaXNwYXRjaCA9IF9yZWYzLmRpc3BhdGNoOwogICAgICBkaXNwYXRjaCgncmRmRWRpdG9yU3RvcmUvcXVlcnlTdG9yZScsIHN0YXRlLlNQQVJRTENvZGUsIHsKICAgICAgICByb290OiB0cnVlCiAgICAgIH0pOwogICAgfSwKICAgIHF1ZXJ5RW5kcG9pbnQ6IGZ1bmN0aW9uIHF1ZXJ5RW5kcG9pbnQoX3JlZjQpIHsKICAgICAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsCiAgICAgICAgICBjb21taXQgPSBfcmVmNC5jb21taXQ7CiAgICAgIHZhciB0MCA9IHBlcmZvcm1hbmNlLm5vdygpOwogICAgICBzdGF0ZS5yZW1vdGVSZXN1bHRJc1JlYWR5ID0gZmFsc2U7CiAgICAgIHZhciBxdWVyeVVSTCA9IG1ha2VRdWVyeShzdGF0ZS5TUEFSUUxDb2RlLCBzdGF0ZS5lbmRwb2ludCwgc3RhdGUucmVzdWx0VHlwZSk7CiAgICAgIHZhciByYXdSZXNwb25zZSA9IHNlbmRRdWVyeShxdWVyeVVSTCk7CgogICAgICB0cnkgewogICAgICAgIGNvbW1pdCgndXBkYXRlUmVtb3RlUmVzdWx0JywgSlNPTi5wYXJzZShyYXdSZXNwb25zZSkpOwogICAgICAgIGNvbW1pdCgndXBkYXRlRXJyb3InLCB7CiAgICAgICAgICBuZXdFcnJvclN0YXR1czogZmFsc2UsCiAgICAgICAgICBuZXdFcnJvck1lc3NhZ2U6ICcnCiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29tbWl0KCd1cGRhdGVFcnJvcicsIHsKICAgICAgICAgIG5ld0Vycm9yU3RhdHVzOiB0cnVlLAogICAgICAgICAgbmV3RXJyb3JNZXNzYWdlOiByYXdSZXNwb25zZS5zcGxpdCgiXG4iKVswXQogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgdDEgPSBwZXJmb3JtYW5jZS5ub3coKTsKICAgICAgY29tbWl0KCd1cGRhdGVSZW1vdGVSZXN1bHRUaW1lJywgTWF0aC5yb3VuZCgodDEgLSB0MCkgKiAxMDAgKyBOdW1iZXIuRVBTSUxPTikgLyAxMDApOwogICAgfSwKICAgIHVwZGF0ZUVuZHBvaW50OiBmdW5jdGlvbiB1cGRhdGVFbmRwb2ludChfcmVmNSwgbmV3RW5kcG9pbnQpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdDsKICAgICAgY29tbWl0KCd1cGRhdGVFbmRwb2ludCcsIG5ld0VuZHBvaW50KTsKICAgIH0sCiAgICBzYXZlUXVlcnk6IGZ1bmN0aW9uIHNhdmVRdWVyeShfcmVmNikgewogICAgICB2YXIgc3RhdGUgPSBfcmVmNi5zdGF0ZTsKICAgICAgY29uc29sZS5sb2coc3RhdGUuU1BBUlFMQ29kZSk7CiAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3N0YXRlLlNQQVJRTENvZGVdLCB7CiAgICAgICAgdHlwZTogInRleHQvcGxhaW47Y2hhcnNldD11dGYtOCIKICAgICAgfSk7CiAgICAgIHNhdmVBcyhibG9iLCAncXVlcnkudHh0Jyk7CiAgICB9LAogICAgdXBkYXRlTG9jYWxSZXN1bHQ6IGZ1bmN0aW9uIHVwZGF0ZUxvY2FsUmVzdWx0KF9yZWY3LCBuZXdMb2NhbFJlc3VsdCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjcuY29tbWl0OwogICAgICBjb21taXQoJ3VwZGF0ZUxvY2FsUmVzdWx0JywgbmV3TG9jYWxSZXN1bHQpOwogICAgfSwKICAgIGFkZFByZWZpeFRvQ29kZTogZnVuY3Rpb24gYWRkUHJlZml4VG9Db2RlKF9yZWY4LCBwYXlsb2FkKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmOC5jb21taXQ7CiAgICAgIGNvbW1pdCgnYWRkUHJlZml4VG9Db2RlJywgcGF5bG9hZCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/home/anhelka/Documents/epimorphics/qonsole/src/store/modules/sparqleditor.store.js"],"names":["makeQuery","sendQuery","saveAs","namespaced","state","SPARQLCode","endpoint","errorStatus","errorMessage","resultType","remoteResult","cols","rows","remoteResultIsReady","remoteResultTime","localResult","localResultIsReady","localResultTime","getters","remoteResultCols","remoteResultRows","localResultCols","localResultRows","mutations","updateCode","newCode","updateResponse","newResponse","jsonResponse","console","log","updateError","newErrorStatus","newErrorMessage","updateEndpoint","newEndpoint","updateRemoteResult","head","vars","i","results","bindings","length","entries","Object","row","j","push","value","updateLocalResult","newLocalResult","variables","updateLocalResultTime","newTime","updateRemoteResultTime","actions","commit","queryStore","dispatch","root","queryEndpoint","t0","performance","now","queryURL","rawResponse","JSON","parse","error","split","t1","Math","round","Number","EPSILON","saveQuery","blob","Blob","type","addPrefixToCode","payload"],"mappings":";;;;;AAAA,SAAQA,SAAR,EAAmBC,SAAnB,QAAmC,0BAAnC;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,UAAU,EAAE,EADT;AAEHC,IAAAA,QAAQ,EAAE,EAFP;AAGHC,IAAAA,WAAW,EAAE,KAHV;AAIHC,IAAAA,YAAY,EAAE,EAJX;AAKHC,IAAAA,UAAU,EAAE,MALT;AAMH;AACAC,IAAAA,YAAY,EAAE;AACVC,MAAAA,IAAI,EAAE,IADI;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAPX;AAWHC,IAAAA,mBAAmB,EAAE,KAXlB;AAYHC,IAAAA,gBAAgB,EAAE,CAZf;AAaH;AACAC,IAAAA,WAAW,EAAE;AACTJ,MAAAA,IAAI,EAAE,IADG;AAETC,MAAAA,IAAI,EAAE;AAFG,KAdV;AAkBHI,IAAAA,kBAAkB,EAAE,KAlBjB;AAmBHC,IAAAA,eAAe,EAAE;AAnBd,GAFI;AAuBXC,EAAAA,OAAO,EAAE;AACLb,IAAAA,UAAU,EAAE,oBAAAD,KAAK;AAAA,aAAIA,KAAK,CAACC,UAAV;AAAA,KADZ;AAELE,IAAAA,WAAW,EAAE,qBAAAH,KAAK;AAAA,aAAIA,KAAK,CAACG,WAAV;AAAA,KAFb;AAGLC,IAAAA,YAAY,EAAE,sBAAAJ,KAAK;AAAA,aAAIA,KAAK,CAACI,YAAV;AAAA,KAHd;AAILW,IAAAA,gBAAgB,EAAE,0BAAAf,KAAK;AAAA,aAAIA,KAAK,CAACM,YAAN,CAAmBC,IAAvB;AAAA,KAJlB;AAKLS,IAAAA,gBAAgB,EAAE,0BAAAhB,KAAK;AAAA,aAAIA,KAAK,CAACM,YAAN,CAAmBE,IAAvB;AAAA,KALlB;AAMLC,IAAAA,mBAAmB,EAAE,6BAAAT,KAAK;AAAA,aAAIA,KAAK,CAACS,mBAAV;AAAA,KANrB;AAOLC,IAAAA,gBAAgB,EAAE,0BAAAV,KAAK;AAAA,aAAIA,KAAK,CAACU,gBAAV;AAAA,KAPlB;AAQLO,IAAAA,eAAe,EAAE,yBAAAjB,KAAK;AAAA,aAAIA,KAAK,CAACW,WAAN,CAAkBJ,IAAtB;AAAA,KARjB;AASLW,IAAAA,eAAe,EAAE,yBAAAlB,KAAK;AAAA,aAAIA,KAAK,CAACW,WAAN,CAAkBH,IAAtB;AAAA,KATjB;AAULI,IAAAA,kBAAkB,EAAE,4BAAAZ,KAAK;AAAA,aAAIA,KAAK,CAACY,kBAAV;AAAA,KAVpB;AAWLC,IAAAA,eAAe,EAAE,yBAAAb,KAAK;AAAA,aAAIA,KAAK,CAACa,eAAV;AAAA;AAXjB,GAvBE;AAoCXM,EAAAA,SAAS,EAAE;AACPC,IAAAA,UADO,sBACKpB,KADL,EACYqB,OADZ,EACqB;AACxBrB,MAAAA,KAAK,CAACC,UAAN,GAAmBoB,OAAnB;AACH,KAHM;AAIPC,IAAAA,cAJO,0BAIStB,KAJT,EAIgBuB,WAJhB,EAI6B;AAChCvB,MAAAA,KAAK,CAACwB,YAAN,GAAqBD,WAArB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAK,CAACwB,YAAlB;AACH,KAPM;AAQPG,IAAAA,WARO,uBAQM3B,KARN,QAQgD;AAAA,UAAlC4B,cAAkC,QAAlCA,cAAkC;AAAA,UAAlBC,eAAkB,QAAlBA,eAAkB;AACnD7B,MAAAA,KAAK,CAACG,WAAN,GAAoByB,cAApB;AACA5B,MAAAA,KAAK,CAACI,YAAN,GAAqByB,eAArB;AACH,KAXM;AAYPC,IAAAA,cAZO,0BAYS9B,KAZT,EAYgB+B,WAZhB,EAY6B;AAChC/B,MAAAA,KAAK,CAACE,QAAN,GAAiB6B,WAAjB;AACH,KAdM;AAePC,IAAAA,kBAfO,8BAeahC,KAfb,EAeoBuB,WAfpB,EAeiC;AACpC;AACAvB,MAAAA,KAAK,CAACM,YAAN,CAAmBC,IAAnB,GAA0BgB,WAAW,CAACU,IAAZ,CAAiBC,IAA3C,CAFoC,CAIpC;;AACA,UAAI1B,IAAI,GAAG,EAAX;;AACA,WAAM,IAAI2B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAEZ,WAAW,CAACa,OAAZ,CAAoBC,QAApB,CAA6BC,MAAjD,EAAyDH,CAAC,EAA1D,EAA8D;AAC1D,YAAII,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAehB,WAAW,CAACa,OAAZ,CAAoBC,QAApB,CAA6BF,CAA7B,CAAf,CAAd;AACA,YAAIM,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACD,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrCD,UAAAA,GAAG,CAACE,IAAJ,CAASJ,OAAO,CAACG,CAAD,CAAP,CAAW,CAAX,EAAcE,KAAvB;AACH;;AACDpC,QAAAA,IAAI,CAACmC,IAAL,CAAUF,GAAV;AACH;;AACDzC,MAAAA,KAAK,CAACM,YAAN,CAAmBE,IAAnB,GAA0BA,IAA1B;AAEAR,MAAAA,KAAK,CAACS,mBAAN,GAA4B,IAA5B;AACH,KAhCM;AAiCPoC,IAAAA,iBAjCO,6BAiCY7C,KAjCZ,EAiCmB8C,cAjCnB,EAiCmC;AACtC,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIR,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeO,cAAc,CAAC,CAAD,CAA7B,CAAd;;AACA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,OAAO,CAACD,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACrCY,QAAAA,SAAS,CAACJ,IAAV,CAAeJ,OAAO,CAACJ,CAAD,CAAP,CAAW,CAAX,CAAf;AACH;;AACDnC,MAAAA,KAAK,CAACW,WAAN,CAAkBJ,IAAlB,GAAyBwC,SAAzB;AAEA,UAAIvC,IAAI,GAAG,EAAX;;AACA,WAAK2B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGW,cAAc,CAACR,MAA/B,EAAuCH,CAAC,EAAxC,EAA4C;AACxCI,QAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeO,cAAc,CAACX,CAAD,CAA7B,CAAV;AACA,YAAIM,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACD,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrCD,UAAAA,GAAG,CAACE,IAAJ,CAASJ,OAAO,CAACG,CAAD,CAAP,CAAW,CAAX,EAAcE,KAAvB;AACH;;AACDpC,QAAAA,IAAI,CAACmC,IAAL,CAAUF,GAAV;AACH;;AACDzC,MAAAA,KAAK,CAACW,WAAN,CAAkBH,IAAlB,GAAyBA,IAAzB;AAEAR,MAAAA,KAAK,CAACY,kBAAN,GAA2B,IAA3B;AACH,KArDM;AAsDPoC,IAAAA,qBAtDO,iCAsDgBhD,KAtDhB,EAsDuBiD,OAtDvB,EAsDgC;AACnCjD,MAAAA,KAAK,CAACa,eAAN,GAAwBoC,OAAxB;AACH,KAxDM;AAyDPC,IAAAA,sBAzDO,kCAyDiBlD,KAzDjB,EAyDwBiD,OAzDxB,EAyDiC;AACpCjD,MAAAA,KAAK,CAACU,gBAAN,GAAyBuC,OAAzB;AACH;AA3DM,GApCA;AAiGXE,EAAAA,OAAO,EAAE;AACL/B,IAAAA,UAAU,EAAE,2BAAWC,OAAX,EAAuB;AAAA,UAArB+B,MAAqB,SAArBA,MAAqB;AAC/BA,MAAAA,MAAM,CAAC,YAAD,EAAe/B,OAAf,CAAN;AACH,KAHI;AAILgC,IAAAA,UAAU,EAAE,2BAAuB;AAAA,UAArBrD,KAAqB,SAArBA,KAAqB;AAAA,UAAdsD,QAAc,SAAdA,QAAc;AAC/BA,MAAAA,QAAQ,CAAC,2BAAD,EAA8BtD,KAAK,CAACC,UAApC,EAAgD;AAACsD,QAAAA,IAAI,EAAE;AAAP,OAAhD,CAAR;AACH,KANI;AAOLC,IAAAA,aAAa,EAAE,8BAAqB;AAAA,UAAnBxD,KAAmB,SAAnBA,KAAmB;AAAA,UAAZoD,MAAY,SAAZA,MAAY;AAChC,UAAIK,EAAE,GAAGC,WAAW,CAACC,GAAZ,EAAT;AAEA3D,MAAAA,KAAK,CAACS,mBAAN,GAA4B,KAA5B;AACA,UAAImD,QAAQ,GAAGhE,SAAS,CAACI,KAAK,CAACC,UAAP,EAAmBD,KAAK,CAACE,QAAzB,EAAmCF,KAAK,CAACK,UAAzC,CAAxB;AACA,UAAIwD,WAAW,GAAGhE,SAAS,CAAC+D,QAAD,CAA3B;;AACA,UAAI;AACAR,QAAAA,MAAM,CAAC,oBAAD,EAAuBU,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAvB,CAAN;AACAT,QAAAA,MAAM,CAAC,aAAD,EAAgB;AAACxB,UAAAA,cAAc,EAAE,KAAjB;AAAwBC,UAAAA,eAAe,EAAE;AAAzC,SAAhB,CAAN;AACH,OAHD,CAGE,OAAOmC,KAAP,EAAc;AACZZ,QAAAA,MAAM,CAAC,aAAD,EAAgB;AAACxB,UAAAA,cAAc,EAAE,IAAjB;AAAuBC,UAAAA,eAAe,EAAEgC,WAAW,CAACI,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB;AAAxC,SAAhB,CAAN;AACH;;AACD,UAAIC,EAAE,GAAGR,WAAW,CAACC,GAAZ,EAAT;AACAP,MAAAA,MAAM,CAAC,wBAAD,EAA4Be,IAAI,CAACC,KAAL,CAAY,CAACF,EAAE,GAACT,EAAJ,IAAU,GAAV,GAAgBY,MAAM,CAACC,OAAnC,IAA+C,GAA3E,CAAN;AACH,KArBI;AAsBLxC,IAAAA,cAAc,EAAE,+BAAWC,WAAX,EAA2B;AAAA,UAAzBqB,MAAyB,SAAzBA,MAAyB;AACvCA,MAAAA,MAAM,CAAC,gBAAD,EAAmBrB,WAAnB,CAAN;AACH,KAxBI;AAyBLwC,IAAAA,SAAS,EAAE,0BAAa;AAAA,UAAXvE,KAAW,SAAXA,KAAW;AACpByB,MAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAK,CAACC,UAAlB;AACA,UAAIuE,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACzE,KAAK,CAACC,UAAP,CAAT,EAA6B;AAACyE,QAAAA,IAAI,EAAE;AAAP,OAA7B,CAAX;AACA5E,MAAAA,MAAM,CAAC0E,IAAD,EAAO,WAAP,CAAN;AACH,KA7BI;AA8BL3B,IAAAA,iBAAiB,EAAE,kCAAWC,cAAX,EAA8B;AAAA,UAA5BM,MAA4B,SAA5BA,MAA4B;AAC7CA,MAAAA,MAAM,CAAC,mBAAD,EAAsBN,cAAtB,CAAN;AACH,KAhCI;AAiCL6B,IAAAA,eAAe,EAAE,gCAAWC,OAAX,EAAuB;AAAA,UAArBxB,MAAqB,SAArBA,MAAqB;AACpCA,MAAAA,MAAM,CAAC,iBAAD,EAAoBwB,OAApB,CAAN;AACH;AAnCI;AAjGE,CAAf","sourcesContent":["import {makeQuery, sendQuery} from '@/scripts/remoteQuery.js'\nimport {saveAs} from 'file-saver'\nexport default {\n    namespaced: true, \n    state: {\n        SPARQLCode: '', \n        endpoint: '', \n        errorStatus: false,\n        errorMessage: '', \n        resultType: 'JSON', \n        // For SPARQL Editor only \n        remoteResult: {\n            cols: null,\n            rows: null\n        },\n        remoteResultIsReady: false,\n        remoteResultTime: 0, \n        // For using SPARQL editor to query \"local\" RDF store \n        localResult: {\n            cols: null, \n            rows: null\n        },\n        localResultIsReady: false,\n        localResultTime: 0 \n    }, \n    getters: {\n        SPARQLCode: state => state.SPARQLCode,\n        errorStatus: state => state.errorStatus,\n        errorMessage: state => state.errorMessage, \n        remoteResultCols: state => state.remoteResult.cols,\n        remoteResultRows: state => state.remoteResult.rows, \n        remoteResultIsReady: state => state.remoteResultIsReady,\n        remoteResultTime: state => state.remoteResultTime, \n        localResultCols: state => state.localResult.cols,\n        localResultRows: state => state.localResult.rows,\n        localResultIsReady: state => state.localResultIsReady,\n        localResultTime: state => state.localResultTime \n    },\n    mutations: {\n        updateCode (state, newCode) {\n            state.SPARQLCode = newCode \n        },\n        updateResponse (state, newResponse) {\n            state.jsonResponse = newResponse\n            console.log(state.jsonResponse)\n        },\n        updateError (state, {newErrorStatus, newErrorMessage}) {\n            state.errorStatus = newErrorStatus\n            state.errorMessage = newErrorMessage\n        },\n        updateEndpoint (state, newEndpoint) {\n            state.endpoint = newEndpoint\n        },\n        updateRemoteResult (state, newResponse) {\n            // Get collumn headings i.e. variables \n            state.remoteResult.cols = newResponse.head.vars \n            \n            // Get row of data for output \n            var rows = []\n            for ( var i = 0; i< newResponse.results.bindings.length; i++) {\n                var entries = Object.entries(newResponse.results.bindings[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            state.remoteResult.rows = rows \n\n            state.remoteResultIsReady = true \n        },\n        updateLocalResult (state, newLocalResult) {\n            var variables = []\n            var entries = Object.entries(newLocalResult[0])\n            for (var i = 0; i < entries.length; i++) {\n                variables.push(entries[i][0])\n            }\n            state.localResult.cols = variables \n\n            var rows = []\n            for (i = 0; i < newLocalResult.length; i++) {\n                entries = Object.entries(newLocalResult[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            state.localResult.rows = rows \n\n            state.localResultIsReady = true \n        },\n        updateLocalResultTime (state, newTime) {\n            state.localResultTime = newTime \n        },\n        updateRemoteResultTime (state, newTime) {\n            state.remoteResultTime = newTime\n        }\n    },\n    actions: {\n        updateCode: ({commit}, newCode) => {\n            commit('updateCode', newCode)\n        },\n        queryStore: ({state, dispatch}) => {\n            dispatch('rdfEditorStore/queryStore', state.SPARQLCode, {root: true})\n        },\n        queryEndpoint: ({state, commit}) => {\n            var t0 = performance.now()\n\n            state.remoteResultIsReady = false \n            var queryURL = makeQuery(state.SPARQLCode, state.endpoint, state.resultType)\n            var rawResponse = sendQuery(queryURL)\n            try {\n                commit('updateRemoteResult', JSON.parse(rawResponse))\n                commit('updateError', {newErrorStatus: false, newErrorMessage: ''})\n            } catch (error) {\n                commit('updateError', {newErrorStatus: true, newErrorMessage: rawResponse.split(\"\\n\")[0]})\n            }\n            var t1 = performance.now()\n            commit('updateRemoteResultTime', (Math.round( (t1-t0) * 100 + Number.EPSILON ) / 100))\n        },\n        updateEndpoint: ({commit}, newEndpoint) => {\n            commit('updateEndpoint', newEndpoint)\n        },\n        saveQuery: ({state}) => {\n            console.log(state.SPARQLCode)\n            var blob = new Blob([state.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n            saveAs(blob, 'query.txt')\n        },\n        updateLocalResult: ({commit}, newLocalResult) => {\n            commit('updateLocalResult', newLocalResult)\n        },\n        addPrefixToCode: ({commit}, payload) => {\n            commit('addPrefixToCode', payload)\n        }\n    }\n}"]}]}