{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1593619799994},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb2RlRWRpdG9yIGZyb20gJy4vQ29kZS1FZGl0b3IudnVlJwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJwppbXBvcnQgT3V0cHV0IGZyb20gJy4vT3V0cHV0LnZ1ZScKaW1wb3J0IHttYWtlUXVlcnksIHNlbmRRdWVyeX0gZnJvbSAnQC9xdWVyeS5qcycKaW1wb3J0IHN0b3JlIGZyb20gJ0Avc3RvcmUuanMnCmltcG9ydCB7c2F2ZUFzfSBmcm9tICdmaWxlLXNhdmVyJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1NQQVJRTEVkaXRvcicsCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgQ29kZUVkaXRvciwKICAgICAgICBCdXR0b25zLAogICAgICAgIE91dHB1dAogICAgfSwKICAgIHN0b3JlOiBzdG9yZSwgCiAgICBkYXRhICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsYW5ndWFnZTogJ3NwYXJxbCcsCiAgICAgICAgICAgIGVuZHBvaW50OiAnaHR0cDovL2RicGVkaWEub3JnL3NwYXJxbCcsCiAgICAgICAgICAgIHJlc3VsdFR5cGVzOiB7IG9wdGlvbnM6IFsnSlNPTiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjogJ0pTT04nfSAsCiAgICAgICAgICAgIGZpbGU6IG51bGwKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGJ1dHRvbkNsaWNrZWQgKGJ1dHRvbikgewogICAgICAgICAgICBzd2l0Y2ggKGJ1dHRvbikgewogICAgICAgICAgICAgICAgY2FzZSAiQ2xlYXIiOgogICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuY29kZUVkaXRvci5jbGVhckVkaXRvcigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAiUGVyZm9ybSBRdWVyeSI6CiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGNvZGUgZnJvbSBjb2RlIG1pcnJvciAKICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLiRyZWZzLmNvZGVFZGl0b3Iuc2VuZENvbnRlbnQoKTsgCiAgICAgICAgICAgICAgICAgICAgLy8gU2VuZCBTUEFSUUwgcXVlcnkgdG8gU1BBUlFMIGVuZHBvaW50IHdpdGggdGhlIHVzZXIgZGVjaWRlZCBvdXRwdXQgZm9ybWF0CiAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5VVJMID0gbWFrZVF1ZXJ5KHRoaXMuJHN0b3JlLmdldHRlcnMuU1BBUlFMQ29kZSwgdGhpcy5lbmRwb2ludCwgdGhpcy5yZXN1bHRUeXBlcy5zZWxlY3RlZE9wdGlvbikKICAgICAgICAgICAgICAgICAgICB2YXIgcmF3UmVzcG9uc2UgPSBzZW5kUXVlcnkocXVlcnlVUkwpCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVKU09OUmVzcG9uc2UnLCBKU09OLnBhcnNlKHJhd1Jlc3BvbnNlKSkKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdjaGFuZ2VFcnJvcicsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnY2hhbmdlRXJyb3InLCB0cnVlKQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZUVycm9yTWVzc2FnZScsIHJhd1Jlc3BvbnNlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsgCiAgICAgICAgICAgICAgICBjYXNlICJTYXZlIFF1ZXJ5IjoKICAgICAgICAgICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFt0aGlzLiRzdG9yZS5nZXR0ZXJzLlNQQVJRTENvZGVdLCB7dHlwZTogInRleHQvcGxhaW47Y2hhcnNldD11dGYtOCJ9KQogICAgICAgICAgICAgICAgICAgIHNhdmVBcyhibG9iLCAncXVlcnkudHh0JykKICAgICAgICAgICAgICAgICAgICBicmVhazsgCiAgICAgICAgICAgIH0KICAgICAgICB9LCAKICAgICAgICBsb2FkVGV4dEZyb21GaWxlOiBmdW5jdGlvbiAoZXYpIHsKICAgICAgICAgICAgY29uc3QgZmlsZSA9IGV2LnRhcmdldC5maWxlc1swXTsKICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGUgPT4gdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVTUEFSUUxDb2RlJywgZS50YXJnZXQucmVzdWx0KQogICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKQogICAgICAgIH0KICAgIH0sCiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVDdXJyZW50TGFuZ3VhZ2UnLCB0aGlzLmxhbmd1YWdlKQogICAgfQp9Cg=="},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SPARQL-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        Example datasheets: \n        <CodeEditor :language=\"language\" \n                    ref=\"codeEditor\" />\n        <label for=\"endpoint\">SPARQL Endpoint: </label>\n        <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n        <input type=\"file\" @change=\"loadTextFromFile\">\n        <Buttons :language=\"language\" \n                 @buttonClicked=\"buttonClicked\" />\n        <select v-model=\"resultTypes.selectedOption\">\n            <option v-for=\"type in resultTypes.options\" \n                    :value=\"type\" \n                    :key=\"type\"> {{ type }} </option>\n        </select>\n        <Output ref=\"output\" />\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport store from '@/store.js'\nimport {saveAs} from 'file-saver'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    store: store, \n    data () {\n        return {\n            language: 'sparql',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            file: null\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor();\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    // this.$refs.codeEditor.sendContent(); \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.$store.getters.SPARQLCode, this.endpoint, this.resultTypes.selectedOption)\n                    var rawResponse = sendQuery(queryURL)\n                    try {\n                        this.$store.commit('updateJSONResponse', JSON.parse(rawResponse))\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        this.$store.commit('changeError', true)\n                        this.$store.commit('updateErrorMessage', rawResponse)\n                    }\n                    break; \n                case \"Save Query\":\n                    var blob = new Blob([this.$store.getters.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n                    saveAs(blob, 'query.txt')\n                    break; \n            }\n        }, \n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateSPARQLCode', e.target.result)\n            reader.readAsText(file)\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"]}]}