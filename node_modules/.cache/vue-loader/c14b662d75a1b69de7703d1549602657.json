{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1594309177812},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb2RlRWRpdG9yIGZyb20gJy4vQ29kZS1FZGl0b3IudnVlJwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJwppbXBvcnQgT3V0cHV0IGZyb20gJy4vT3V0cHV0LnZ1ZScKaW1wb3J0IHttYWtlUXVlcnksIHNlbmRRdWVyeX0gZnJvbSAnQC9xdWVyeS5qcycKaW1wb3J0IHN0b3JlIGZyb20gJ0Avc3RvcmUuanMnCmltcG9ydCB7c2F2ZUFzfSBmcm9tICdmaWxlLXNhdmVyJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1NQQVJRTEVkaXRvcicsCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgQ29kZUVkaXRvciwKICAgICAgICBCdXR0b25zLAogICAgICAgIE91dHB1dAogICAgfSwKICAgIHByb3BzOiBbJ3JkZnNwYXJxbCddLCAKICAgIHN0b3JlOiBzdG9yZSwgCiAgICBkYXRhICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsYW5ndWFnZTogJ3NwYXJxbCcsCiAgICAgICAgICAgIGVuZHBvaW50OiAnaHR0cDovL2RicGVkaWEub3JnL3NwYXJxbCcsCiAgICAgICAgICAgIHJlc3VsdFR5cGVzOiB7IG9wdGlvbnM6IFsnSlNPTiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjogJ0pTT04nfSAsCiAgICAgICAgICAgIGZpbGU6IG51bGwsCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBidXR0b25DbGlja2VkIChidXR0b24pIHsKICAgICAgICAgICAgc3dpdGNoIChidXR0b24pIHsKICAgICAgICAgICAgICAgIGNhc2UgIkNsZWFyIjoKICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZVNQQVJRTENvZGUnLCcnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAiUGVyZm9ybSBRdWVyeSI6CiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGNvZGUgZnJvbSBjb2RlIG1pcnJvciAKICAgICAgICAgICAgICAgICAgICAvLyBTZW5kIFNQQVJRTCBxdWVyeSB0byBTUEFSUUwgZW5kcG9pbnQgd2l0aCB0aGUgdXNlciBkZWNpZGVkIG91dHB1dCBmb3JtYXQKICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnlVUkwgPSBtYWtlUXVlcnkodGhpcy4kc3RvcmUuZ2V0dGVycy5TUEFSUUxDb2RlLCB0aGlzLmVuZHBvaW50LCB0aGlzLnJlc3VsdFR5cGVzLnNlbGVjdGVkT3B0aW9uKQogICAgICAgICAgICAgICAgICAgIHZhciByYXdSZXNwb25zZSA9IHNlbmRRdWVyeShxdWVyeVVSTCkKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZUpTT05SZXNwb25zZScsIEpTT04ucGFyc2UocmF3UmVzcG9uc2UpKQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2NoYW5nZUVycm9yJywgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdjaGFuZ2VFcnJvcicsIHRydWUpCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlRXJyb3JNZXNzYWdlJywgcmF3UmVzcG9uc2UpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyAKICAgICAgICAgICAgICAgIGNhc2UgIlNhdmUgUXVlcnkiOgogICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3RoaXMuJHN0b3JlLmdldHRlcnMuU1BBUlFMQ29kZV0sIHt0eXBlOiAidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04In0pCiAgICAgICAgICAgICAgICAgICAgc2F2ZUFzKGJsb2IsICdxdWVyeS50eHQnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyAKICAgICAgICAgICAgICAgIGNhc2UgIlF1ZXJ5IFN0b3JlIjoKICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3F1ZXJ5U3RvcmUnKQogICAgICAgICAgICB9CiAgICAgICAgfSwgCiAgICAgICAgbG9hZFRleHRGcm9tRmlsZTogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBldi50YXJnZXQuZmlsZXNbMF07CiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHRoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlU1BBUlFMQ29kZScsIGUudGFyZ2V0LnJlc3VsdCkKICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSkKICAgICAgICB9LAogICAgICAgIHNhdmVRdWVyeTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBsZXQgcXVlcnkgPSB7aWQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuc2F2ZWRRdWVyaWVzLmxlbmd0aCwgcXVlcnlUZXh0OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLlNQQVJRTENvZGUsIHF1ZXJ5UmVzdWx0OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnF1ZXJ5UmVzdWx0fQogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FkZFF1ZXJ5VG9TYXZlZFF1ZXJpZXMnLCBxdWVyeSkKICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZDogZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlQ3VycmVudExhbmd1YWdlJywgdGhpcy5sYW5ndWFnZSkKICAgIH0KfQo="},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SPARQL-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div v-show=\"!rdfsparql\">\n            Example datasheets: \n            <CodeEditor :language=\"language\" \n                        ref=\"codeEditor\" />\n            <label for=\"endpoint\">Query from: </label>\n            <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"language\" \n                    @buttonClicked=\"buttonClicked\" />\n            <select v-model=\"resultTypes.selectedOption\">\n                <option v-for=\"type in resultTypes.options\" \n                        :value=\"type\" \n                        :key=\"type\"> {{ type }} </option>\n            </select>\n            <Output ref=\"output\" />\n        </div>\n        <div v-show=\"rdfsparql\">\n            Example datasheets: \n            <CodeEditor :language=\"language\" \n                        ref=\"codeEditor\" />\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"'rdfsparql'\" \n                    @buttonClicked=\"buttonClicked\" />\n        </div>\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport store from '@/store.js'\nimport {saveAs} from 'file-saver'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    props: ['rdfsparql'], \n    store: store, \n    data () {\n        return {\n            language: 'sparql',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            file: null,\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$store.commit('updateSPARQLCode','')\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.$store.getters.SPARQLCode, this.endpoint, this.resultTypes.selectedOption)\n                    var rawResponse = sendQuery(queryURL)\n                    try {\n                        this.$store.commit('updateJSONResponse', JSON.parse(rawResponse))\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        this.$store.commit('changeError', true)\n                        this.$store.commit('updateErrorMessage', rawResponse)\n                    }\n                    break; \n                case \"Save Query\":\n                    var blob = new Blob([this.$store.getters.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n                    saveAs(blob, 'query.txt')\n                    break; \n                case \"Query Store\":\n                    this.$store.commit('queryStore')\n            }\n        }, \n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateSPARQLCode', e.target.result)\n            reader.readAsText(file)\n        },\n        saveQuery: function () {\n            let query = {id: this.$store.getters.savedQueries.length, queryText: this.$store.getters.SPARQLCode, queryResult: this.$store.getters.queryResult}\n            this.$store.commit('addQueryToSavedQueries', query)\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"]}]}