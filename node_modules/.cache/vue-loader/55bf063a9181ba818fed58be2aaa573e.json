{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/User-Input.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/User-Input.vue","mtime":1599234964709},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/css-loader/dist/cjs.js","mtime":1596446669234},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1596446670053},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/postcss-loader/src/index.js","mtime":1596446669636},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":1596446670053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKbGFiZWwgewogICAgZm9udC1zaXplOiAxNXB4OyAKfQo="},{"version":3,"sources":["User-Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA","file":"User-Input.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"user-input\">\n        <v-row align=\"center\"\n               justify=\"space-around\"\n               style=\"display:inline-block; margin: 10px;\">\n            <v-btn @click=\"clearCode\"> Clear </v-btn>\n            <v-btn v-show=\"mode=='turtle'\" \n                   @click=\"loadStore\"\n                   :disabled=\"this.$store.getters['rdfEditorStore/turtleCode']==''\"> Load </v-btn>\n\n            <!-- For SPARQL Editor -->\n            <!-- For SPARQL Editor in RDF mode -->\n            <v-btn v-show=\"mode=='rdfsparql'\"\n                   @click=\"queryStore\"\n                   :disabled=\"this.$store.getters['sparqlEditorStore/SPARQLCode']==''\"> Query Store </v-btn>\n\n            <!-- For SPARQL Editor only -->\n            <strong v-show=\"mode=='sparql'\"> Query from: </strong>\n            <input v-show=\"mode=='sparql'\" type=\"text\" id=\"endpoint\" v-model=\"endpoint\" @input=\"updateEndpoint\" style=\"border: 1px solid gray; border-radius:2px;\">\n            <v-btn v-show=\"mode=='sparql'\" \n                   @click=\"queryEndpoint\"\n                   :disabled=\"this.$store.getters['sparqlEditorStore/SPARQLCode']==''\n                   || this.$store.getters['sparqlEditorStore/endpoint']==''\"> Perform Query </v-btn>\n            <v-btn v-show=\"mode=='sparql'\" @click=\"saveQuery\">Save Query</v-btn>\n            \n            <strong v-show=\"mode=='sparql'\"> Output Format: </strong>\n            <select v-show=\"mode=='sparql'\" v-model=\"selectedFormat\"\n                    @change=\"updateSelectedOutputFormat\" style=\"border: 1px solid gray; border-radius: 2px;\">\n                <option value=\"Table\" selected=\"selected\"> Table </option>\n                <option value=\"JSON\"> JSON </option>\n                <option value=\"CSV\"> CSV </option>\n                <option value=\"XML\"> XML </option>\n            </select>\n\n            <br>\n\n            <!-- Load code from local file -->\n            <strong> Import code from local: </strong>\n            <input type=\"file\" @change=\"loadTextFromFile\">\n        </v-row>\n    </div>\n</template>\n<script>\nimport store from '@/store/store.js'\n\nexport default{\n    name: 'UserInput',\n    store: store, \n    props: ['mode'], \n    data () {\n        return {\n            endpoint: '',\n            selectedFormat: 'Table', \n        }\n    }, \n    methods: {\n        clearCode () {\n            switch (this.mode) {\n                case 'sparql':\n                    this.$store.dispatch('sparqlEditorStore/updateCode', '')\n                    break; \n                case 'rdfsparql':\n                    this.$store.dispatch('sparqlEditorStore/updateCode', '')\n                    break; \n                case 'turtle':\n                    this.$store.dispatch('rdfEditorStore/updateCode', '')\n            }\n        },\n        loadStore () {\n            this.$store.dispatch('rdfEditorStore/loadRDF')\n        },\n        queryEndpoint () {\n            this.$store.dispatch('sparqlEditorStore/queryEndpoint')\n        },\n        queryStore () {\n            this.$store.dispatch('sparqlEditorStore/queryStore')\n        }, \n        updateEndpoint () {\n            this.$store.dispatch('sparqlEditorStore/updateEndpoint', this.endpoint)\n        },\n        loadTextFromFile (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            switch (this.mode) {\n                case 'sparql':\n                    reader.onload = e => this.$store.dispatch('sparqlEditorStore/updateCode', e.target.result)\n                    break; \n                case 'turtle':\n                    reader.onload = e => this.$store.dispatch('rdfEditorStore/updateCode', e.target.result)\n            }\n            reader.readAsText(file)\n        },\n        saveQuery () {\n            this.$store.dispatch('sparqlEditorStore/saveQuery')\n        },\n        updateSelectedOutputFormat () {\n            this.$store.dispatch('sparqlEditorStore/updateOutputFormat', this.selectedFormat)\n        }\n    }\n}\n</script>\n<style>\nlabel {\n    font-size: 15px; \n}\n</style>"]}]}