{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1594309177812},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpkaXYgewogICAgbGluZS1oZWlnaHQ6IDI7IAp9Cg=="},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;AACA;AACA","file":"SPARQL-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div v-show=\"!rdfsparql\">\n            Example datasheets: \n            <CodeEditor :language=\"language\" \n                        ref=\"codeEditor\" />\n            <label for=\"endpoint\">Query from: </label>\n            <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"language\" \n                    @buttonClicked=\"buttonClicked\" />\n            <select v-model=\"resultTypes.selectedOption\">\n                <option v-for=\"type in resultTypes.options\" \n                        :value=\"type\" \n                        :key=\"type\"> {{ type }} </option>\n            </select>\n            <Output ref=\"output\" />\n        </div>\n        <div v-show=\"rdfsparql\">\n            Example datasheets: \n            <CodeEditor :language=\"language\" \n                        ref=\"codeEditor\" />\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"'rdfsparql'\" \n                    @buttonClicked=\"buttonClicked\" />\n        </div>\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport store from '@/store.js'\nimport {saveAs} from 'file-saver'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    props: ['rdfsparql'], \n    store: store, \n    data () {\n        return {\n            language: 'sparql',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            file: null,\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$store.commit('updateSPARQLCode','')\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.$store.getters.SPARQLCode, this.endpoint, this.resultTypes.selectedOption)\n                    var rawResponse = sendQuery(queryURL)\n                    try {\n                        this.$store.commit('updateJSONResponse', JSON.parse(rawResponse))\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        this.$store.commit('changeError', true)\n                        this.$store.commit('updateErrorMessage', rawResponse)\n                    }\n                    break; \n                case \"Save Query\":\n                    var blob = new Blob([this.$store.getters.SPARQLCode], {type: \"text/plain;charset=utf-8\"})\n                    saveAs(blob, 'query.txt')\n                    break; \n                case \"Query Store\":\n                    this.$store.commit('queryStore')\n            }\n        }, \n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateSPARQLCode', e.target.result)\n            reader.readAsText(file)\n        },\n        saveQuery: function () {\n            let query = {id: this.$store.getters.savedQueries.length, queryText: this.$store.getters.SPARQLCode, queryResult: this.$store.getters.queryResult}\n            this.$store.commit('addQueryToSavedQueries', query)\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"]}]}