{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/RDF-Editor.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/RDF-Editor.vue","mtime":1594385188791},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpkaXYgewogICAgbGluZS1oZWlnaHQ6IDEuNTsgCn0KLnZlcnRpY2FsLXBhbmVzIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDQ1MHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7Cn0KLnZlcnRpY2FsLXBhbmVzID4gLnBhbmUgewogICAgd2lkdGg6IDUwJTsgCiAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgcGFkZGluZzogMTVweDsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICBiYWNrZ3JvdW5kOiAjZWVlOwp9Ci52ZXJ0aWNhbC1wYW5lcyA+IC5wYW5lIH4gLnBhbmUgewogIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2NjYzsKfQo="},{"version":3,"sources":["RDF-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RDF-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n    <Multipane class=\"vertical-panes\" layout=\"vertical\">\n        <div class=\"pane\" >\n            <h3>RDF Editor</h3>\n            <CodeEditor :language=\"language\" \n            ref=\"codeEditor\" \n            @sendCode=\"code = $event\" />\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <Buttons :language=\"language\"\n                @buttonClicked=\"buttonClicked\" /> \n        </div>\n        <MultipaneResizer></MultipaneResizer>\n        <div class=\"pane\" >\n            <h3>SPARQL Editor</h3>\n            <SPARQLEditor :rdfsparql=\"rdfsparql\"/>\n        </div>\n    </Multipane>        \n    <grid :cols=\"resultCol\" :rows=\"resultRow\" \n          :auto-width=\"autoWidth\"\n          :language=\"{}\"\n          :pagination=\"pagination\"\n          :search=\"search\"\n          :sort=\"sort\"\n          :width=\"width\"\n          v-if=\"this.$store.getters.storeQueryResult!=''\">\n    </grid>\n</div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue' \nimport store from '@/sstore/store.js'\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\nimport SPARQLEditor from './SPARQL-Editor.vue'\nimport Grid from 'gridjs-vue'\n\nexport default {\n    name: 'RDFEditor',\n    components: {\n        Multipane,\n        MultipaneResizer, \n        CodeEditor,\n        Buttons,\n        SPARQLEditor,\n        Grid\n    },\n    store: store, \n    data () {\n        return {\n            language: 'turtle', \n            parsedRDF: '' ,\n            rdfsparql: true, \n            autoWidth: true,\n            pagination: true,\n            search: true,\n            sort: true,\n            theme: 'mermaid',\n            width: '100%',\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) { \n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor(); \n                    break; \n                case \"Load\":\n                    try {\n                        this.$store.commit('clearTurtleStore')\n                        // parseTurtle(this.$store.getters.turtleCode)\n                        this.$store.commit('loadRDF')\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    break;\n            }\n        },\n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateTurtleCode', e.target.result)\n            reader.readAsText(file)\n        },\n        getVariables: function (results) {\n            var variables = []\n            try {\n                var entries = Object.entries(results[0])\n                console.log(entries)\n                for (var i = 0; i < entries.length; i++) {\n                    variables.push(entries[i][0])\n                }\n                return variables\n            } catch (err) {\n                console.log(err)\n            } \n        },\n        getRows: function (results) {\n            var rows = []\n            for (var i = 0; i < results.length; i++){\n                var entries = Object.entries(results[i])\n                var row = []\n                for (var j = 0; j < entries.length; j++) {\n                    row.push(entries[j][1].value)\n                }\n                rows.push(row)\n            }\n            return rows \n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    },\n    computed: {\n        resultCol: function () {\n            return this.getVariables(this.$store.getters.storeQueryResult)\n        },\n        resultRow: function () {\n            return this.getRows(this.$store.getters.storeQueryResult)\n        }\n    }\n}\n</script>\n<style >\ndiv {\n    line-height: 1.5; \n}\n.vertical-panes {\n  width: 100%;\n  height: 450px;\n  border: 1px solid #ccc;\n}\n.vertical-panes > .pane {\n    width: 50%; \n    text-align: left;\n    padding: 15px;\n    overflow: hidden;\n    background: #eee;\n}\n.vertical-panes > .pane ~ .pane {\n  border-left: 1px solid #ccc;\n}\n</style>"]}]}