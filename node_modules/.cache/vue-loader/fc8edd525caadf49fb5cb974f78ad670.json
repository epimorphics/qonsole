{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/SPARQL-Editor.vue","mtime":1593432594327},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb2RlRWRpdG9yIGZyb20gJy4vQ29kZS1FZGl0b3IudnVlJwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJwppbXBvcnQgT3V0cHV0IGZyb20gJy4vT3V0cHV0LnZ1ZScKaW1wb3J0IHttYWtlUXVlcnksIHNlbmRRdWVyeX0gZnJvbSAnQC9xdWVyeS5qcycKaW1wb3J0IHtkZWNvbnN0cnVjdEpTT059IGZyb20gJ0AvcmVzdWx0LmpzJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1NQQVJRTEVkaXRvcicsCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgQ29kZUVkaXRvciwKICAgICAgICBCdXR0b25zLAogICAgICAgIE91dHB1dAogICAgfSwKICAgIGRhdGEgKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxhbmd1YWdlOiAnc3BhcnFsJywKICAgICAgICAgICAgY29kZTogJycsCiAgICAgICAgICAgIGVuZHBvaW50OiAnaHR0cDovL2RicGVkaWEub3JnL3NwYXJxbCcsCiAgICAgICAgICAgIHJlc3VsdFR5cGVzOiB7IG9wdGlvbnM6IFsnSlNPTiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjogJ0pTT04nfSAsCiAgICAgICAgICAgIGpzb25SZXNwb25zZTogW10sCiAgICAgICAgICAgIGRhdGE6IG51bGwgCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBidXR0b25DbGlja2VkIChidXR0b24pIHsKICAgICAgICAgICAgc3dpdGNoIChidXR0b24pIHsKICAgICAgICAgICAgICAgIGNhc2UgIkNsZWFyIjoKICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLmNvZGVFZGl0b3IuY2xlYXJFZGl0b3IoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgIlBlcmZvcm0gUXVlcnkiOgogICAgICAgICAgICAgICAgICAgIC8vIEdldCBjb2RlIGZyb20gY29kZSBtaXJyb3IgCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5jb2RlRWRpdG9yLnNlbmRDb250ZW50KCk7IAogICAgICAgICAgICAgICAgICAgIC8vIFNlbmQgU1BBUlFMIHF1ZXJ5IHRvIFNQQVJRTCBlbmRwb2ludCB3aXRoIHRoZSB1c2VyIGRlY2lkZWQgb3V0cHV0IGZvcm1hdAogICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeVVSTCA9IG1ha2VRdWVyeSh0aGlzLmNvZGUsIHRoaXMuZW5kcG9pbnQsIHRoaXMucmVzdWx0VHlwZXMuc2VsZWN0ZWRPcHRpb24pCiAgICAgICAgICAgICAgICAgICAgdGhpcy5qc29uUmVzcG9uc2UgPSBKU09OLnBhcnNlKHNlbmRRdWVyeShxdWVyeVVSTCkpCiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZGVjb25zdHJ1Y3RKU09OKHRoaXMuanNvblJlc3BvbnNlKQogICAgICAgICAgICB9CiAgICAgICAgfSwgCiAgICB9Cn0K"},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SPARQL-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        Example datasheets: \n        <CodeEditor :language=\"language\" \n                    ref=\"codeEditor\" \n                    @sendCode=\"code = $event\"/>\n        <label for=\"endpoint\">SPARQL Endpoint: </label>\n        <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n        <Buttons :language=\"language\" \n                 @buttonClicked=\"buttonClicked\" />\n\n        <select v-model=\"resultTypes.selectedOption\">\n            <option v-for=\"type in resultTypes.options\" \n                    :value=\"type\" \n                    :key=\"type\"> {{ type }} </option>\n        </select>\n        <Output ref=\"output\" :data=\"data\"/>\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\nimport {makeQuery, sendQuery} from '@/query.js'\nimport {deconstructJSON} from '@/result.js'\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    data () {\n        return {\n            language: 'sparql',\n            code: '',\n            endpoint: 'http://dbpedia.org/sparql',\n            resultTypes: { options: ['JSON'],\n                           selectedOption: 'JSON'} ,\n            jsonResponse: [],\n            data: null \n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor();\n                    break;\n                case \"Perform Query\":\n                    // Get code from code mirror \n                    this.$refs.codeEditor.sendContent(); \n                    // Send SPARQL query to SPARQL endpoint with the user decided output format\n                    var queryURL = makeQuery(this.code, this.endpoint, this.resultTypes.selectedOption)\n                    this.jsonResponse = JSON.parse(sendQuery(queryURL))\n                    this.data = deconstructJSON(this.jsonResponse)\n            }\n        }, \n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"]}]}