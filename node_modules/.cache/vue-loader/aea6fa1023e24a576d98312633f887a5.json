{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole2.0/src/components/SPARQL-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/src/components/SPARQL-Editor.vue","mtime":1593080707846},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb2RlRWRpdG9yIGZyb20gJy4vQ29kZS1FZGl0b3IudnVlJwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJwppbXBvcnQgT3V0cHV0IGZyb20gJy4vT3V0cHV0LnZ1ZScKLy8gaW1wb3J0ICdzcGFycWxqcycKaW1wb3J0IHNwYXJxbFF1ZXJ5IGZyb20gJ0AvcXVlcnkuanMnCgovLyB2YXIgU3BhcnFsUGFyc2VyID0gcmVxdWlyZSgnc3BhcnFsanMnKS5QYXJzZXI7Ci8vIHZhciBwYXJzZXIgPSBuZXcgU3BhcnFsUGFyc2VyKCk7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnU1BBUlFMRWRpdG9yJywKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBDb2RlRWRpdG9yLAogICAgICAgIEJ1dHRvbnMsCiAgICAgICAgT3V0cHV0CiAgICB9LAogICAgZGF0YSAoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGFuZ3VhZ2U6ICdzcGFycWwnLAogICAgICAgICAgICBjb2RlOiAnJywKICAgICAgICAgICAgcGFyc2VkUXVlcnk6ICcnLAogICAgICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly9kYnBlZGlhLm9yZy9zcGFycWwnLAogICAgICAgICAgICByZXN1bHQ6ICcnLAogICAgICAgICAgICByZXN1bHRUeXBlczogeyBvcHRpb25zOiBbJ1RleHQnLCAnSlNPTiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbjogJ0pTT04nfSAsCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBidXR0b25DbGlja2VkIChidXR0b24pIHsKICAgICAgICAgICAgc3dpdGNoIChidXR0b24pIHsKICAgICAgICAgICAgICAgIGNhc2UgIkNsZWFyIjoKICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLmNvZGVFZGl0b3IuY2xlYXJFZGl0b3IoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgIlBlcmZvcm0gUXVlcnkiOgogICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuY29kZUVkaXRvci5zZW5kQ29udGVudCgpOyAKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdD1zcGFycWxRdWVyeSh0aGlzLmNvZGUsIHRoaXMuZW5kcG9pbnQsIHRoaXMucmVzdWx0VHlwZXMuc2VsZWN0ZWRPcHRpb24ucmVwbGFjZSgvWyciXSsvZywgJycpKTsKICAgICAgICAgICAgfQogICAgICAgIH0sIAogICAgfQp9Cg=="},{"version":3,"sources":["SPARQL-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SPARQL-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        Example datasheets: \n        <CodeEditor :language=\"language\" \n                    ref=\"codeEditor\" \n                    @sendCode=\"code = $event\"/>\n        <label for=\"endpoint\">SPARQL Endpoint: </label>\n        <input type=\"text\" id=\"endpoint\" name=\"endpoint\" v-model=\"endpoint\">\n        <Buttons :language=\"language\" \n                 @buttonClicked=\"buttonClicked\" />\n\n        <select v-model=\"resultTypes.selectedOption\">\n            <option v-for=\"type in resultTypes.options\" \n                    :value=\"type\" \n                    :key=\"type\"> {{ type }} </option>\n        </select>\n        <Output :result=\"result\" :resultType=\"resultTypes.selectedOption\" />\n    </div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue'\nimport Output from './Output.vue'\n// import 'sparqljs'\nimport sparqlQuery from '@/query.js'\n\n// var SparqlParser = require('sparqljs').Parser;\n// var parser = new SparqlParser();\n\nexport default {\n    name: 'SPARQLEditor',\n    components: {\n        CodeEditor,\n        Buttons,\n        Output\n    },\n    data () {\n        return {\n            language: 'sparql',\n            code: '',\n            parsedQuery: '',\n            endpoint: 'http://dbpedia.org/sparql',\n            result: '',\n            resultTypes: { options: ['Text', 'JSON'],\n                           selectedOption: 'JSON'} ,\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) {\n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor();\n                    break;\n                case \"Perform Query\":\n                    this.$refs.codeEditor.sendContent(); \n                    this.result=sparqlQuery(this.code, this.endpoint, this.resultTypes.selectedOption.replace(/['\"]+/g, ''));\n            }\n        }, \n    }\n}\n</script>\n<style>\ndiv {\n    line-height: 2; \n}\n</style>"]}]}