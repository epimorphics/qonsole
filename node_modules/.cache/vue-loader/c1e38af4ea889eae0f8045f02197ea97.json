{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/User-Input.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/User-Input.vue","mtime":1598371587129},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/css-loader/dist/cjs.js","mtime":1596446669234},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1596446670053},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/postcss-loader/src/index.js","mtime":1596446669636},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":1596446669101},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":1596446670053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmxhYmVsIHsKICAgIGZvbnQtc2l6ZTogMTVweDsgCn0KI3VzZXItaW5wdXQgYnV0dG9uIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDhDQkE7CiAgICBjb2xvcjogYmxhbmNoZWRhbG1vbmQ7CiAgICBib3JkZXItcmFkaXVzOiAxMCU7CiAgICBwYWRkaW5nOiA1cHggMjBweDsKICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuNHM7CiAgICBib3JkZXI6IDJweCBzb2xpZCAjMDA4Q0JBOyAKICAgIG1hcmdpbjogNXB4OyAKfQojdXNlci1pbnB1dCBidXR0b246aG92ZXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7IAogICAgY29sb3I6IGJsYWNrOyAKfQo="},{"version":3,"sources":["User-Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"User-Input.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"user-input\">\n        <button @click=\"clearCode\">Clear</button>\n        <button v-show=\"mode=='turtle'\" @click=\"loadStore\">Load</button>\n\n        <!-- For SPARQL Editor only -->\n        <!-- For SPARQL Editor in RDF mode -->\n        <button v-show=\"mode=='rdfsparql'\" @click=\"queryStore\">Query Store</button>\n        <label v-show=\"mode=='sparql'\"> Query from: </label>\n        <input v-show=\"mode=='sparql'\" type=\"text\" id=\"endpoint\" v-model=endpoint @input=\"updateEndpoint\">\n        <button v-show=\"mode=='sparql'\" @click=\"queryEndpoint\">Perform Query</button>\n        <button v-show=\"mode=='sparql'\" @click=\"saveQuery\">Save Query</button>\n\n        <br>\n\n        <!-- Load code from local file -->\n        <label> Import code from local: </label>\n        <input type=\"file\" @change=\"loadTextFromFile\">\n    </div>\n</template>\n<script>\nimport store from '@/store/store.js'\n\nexport default{\n    name: 'UserInput',\n    store: store, \n    props: ['mode'], \n    data () {\n        return {\n            endpoint: ''\n        }\n    }, \n    methods: {\n        clearCode () {\n            switch (this.mode) {\n                case 'sparql':\n                    this.$store.dispatch('sparqlEditorStore/updateCode', '')\n                    break; \n                case 'rdfsparql':\n                    this.$store.dispatch('sparqlEditorStore/updateCode', '')\n                    break; \n                case 'turtle':\n                    this.$store.dispatch('rdfEditorStore/updateCode', '')\n            }\n        },\n        loadStore () {\n            this.$store.dispatch('rdfEditorStore/loadRDF')\n        },\n        queryEndpoint () {\n            this.$store.dispatch('sparqlEditorStore/queryEndpoint')\n        },\n        queryStore () {\n            this.$store.dispatch('sparqlEditorStore/queryStore')\n        }, \n        updateEndpoint () {\n            this.$store.dispatch('sparqlEditorStore/updateEndpoint', this.endpoint)\n        },\n        loadTextFromFile (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            switch (this.mode) {\n                case 'sparql':\n                    reader.onload = e => this.$store.dispatch('sparqlEditorStore/updateCode', e.target.result)\n                    break; \n                case 'turtle':\n                    reader.onload = e => this.$store.dispatch('rdfEditorStore/updateCode', e.target.result)\n            }\n            reader.readAsText(file)\n        },\n        saveQuery () {\n            this.$store.dispatch('sparqlEditorStore/saveQuery')\n        }\n    }\n}\n</script>\n<style>\nlabel {\n    font-size: 15px; \n}\n#user-input button {\n    background-color: #008CBA;\n    color: blanchedalmond;\n    border-radius: 10%;\n    padding: 5px 20px;\n    transition-duration: 0.4s;\n    border: 2px solid #008CBA; \n    margin: 5px; \n}\n#user-input button:hover {\n    background-color: white; \n    color: black; \n}\n</style>"]}]}