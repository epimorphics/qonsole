{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/RDF-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/RDF-Editor.vue","mtime":1593699607869},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb2RlRWRpdG9yIGZyb20gJy4vQ29kZS1FZGl0b3IudnVlJwppbXBvcnQgQnV0dG9ucyBmcm9tICcuL0J1dHRvbnMudnVlJyAKaW1wb3J0IE91dHB1dCBmcm9tICcuL091dHB1dC52dWUnCmltcG9ydCBzdG9yZSBmcm9tICdAL3N0b3JlLmpzJwppbXBvcnQgeyBNdWx0aXBhbmUsIE11bHRpcGFuZVJlc2l6ZXIgfSBmcm9tICd2dWUtbXVsdGlwYW5lJwppbXBvcnQgU1BBUlFMRWRpdG9yIGZyb20gJy4vU1BBUlFMLUVkaXRvci52dWUnCmltcG9ydCBHcmlkIGZyb20gJ2dyaWRqcy12dWUnCgovLyBjb25zdCBOMyA9IHJlcXVpcmUoJ24zJyk7CgovLyBmdW5jdGlvbiBwYXJzZVR1cnRsZShjb2RlKSB7Ci8vICAgICAvLyBjb25zdCBwYXJzZXIgPSBuZXcgTjMuUGFyc2VyKCk7Ci8vICAgICAvLyBwYXJzZXIucGFyc2UoY29kZSwgCi8vICAgICAvLyAgICAgKGVycm9yLCBxdWFkLCBwcmVmaXhlcykgPT4gewovLyAgICAgLy8gICAgICAgICBpZiAoZXJyb3IpIHsKLy8gICAgIC8vICAgICAgICAgICAgIHN0b3JlLmNvbW1pdCgnY2hhbmdlRXJyb3InLCB0cnVlKQovLyAgICAgLy8gICAgICAgICAgICAgc3RvcmUuY29tbWl0KCd1cGRhdGVFcnJvck1lc3NhZ2UnLCBlcnJvcikKLy8gICAgIC8vICAgICAgICAgICAgIHJldHVybiBlcnJvciAKLy8gICAgIC8vICAgICAgICAgfSBlbHNlIGlmIChwcmVmaXhlcykgewovLyAgICAgLy8gICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhwcmVmaXhlcykKLy8gICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVudHJpZXMpCi8vICAgICAvLyAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHsKLy8gICAgIC8vICAgICAgICAgICAgICAgICBzdG9yZS5jb21taXQoJ2FkZFByZWZpeCcsIGVudHJpZXNbaV0pCi8vICAgICAvLyAgICAgICAgICAgICB9Ci8vICAgICAvLyAgICAgICAgIH0gZWxzZSB7Ci8vICAgICAvLyAgICAgICAgICAgICBzdG9yZS5jb21taXQoJ3BvcHVsYXRlUkRGU3RvcmUnLCBxdWFkKQovLyAgICAgLy8gICAgICAgICB9Ci8vICAgICAvLyAgICAgfSkKLy8gICAgIHN0b3JlLgovLyB9CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnUkRGRWRpdG9yJywKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBNdWx0aXBhbmUsCiAgICAgICAgTXVsdGlwYW5lUmVzaXplciwgCiAgICAgICAgQ29kZUVkaXRvciwKICAgICAgICBCdXR0b25zLAogICAgICAgIE91dHB1dCwKICAgICAgICBTUEFSUUxFZGl0b3IsCiAgICAgICAgR3JpZAogICAgfSwKICAgIHN0b3JlOiBzdG9yZSwgCiAgICBkYXRhICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsYW5ndWFnZTogJ3R1cnRsZScsIAogICAgICAgICAgICBwYXJzZWRSREY6ICcnICwKICAgICAgICAgICAgcmRmc3BhcnFsOiB0cnVlLCAKICAgICAgICAgICAgYXV0b1dpZHRoOiB0cnVlLAogICAgICAgICAgICBwYWdpbmF0aW9uOiB0cnVlLAogICAgICAgICAgICBzZWFyY2g6IHRydWUsCiAgICAgICAgICAgIHNvcnQ6IHRydWUsCiAgICAgICAgICAgIHRoZW1lOiAnbWVybWFpZCcsCiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBidXR0b25DbGlja2VkIChidXR0b24pIHsKICAgICAgICAgICAgc3dpdGNoIChidXR0b24pIHsgCiAgICAgICAgICAgICAgICBjYXNlICJDbGVhciI6CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5jb2RlRWRpdG9yLmNsZWFyRWRpdG9yKCk7IAogICAgICAgICAgICAgICAgICAgIGJyZWFrOyAKICAgICAgICAgICAgICAgIGNhc2UgIkxvYWQiOgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnY2xlYXJUdXJ0bGVTdG9yZScpCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhcnNlVHVydGxlKHRoaXMuJHN0b3JlLmdldHRlcnMudHVydGxlQ29kZSkKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdsb2FkUkRGJykKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdjaGFuZ2VFcnJvcicsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbG9hZFRleHRGcm9tRmlsZTogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBldi50YXJnZXQuZmlsZXNbMF07CiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHRoaXMuJHN0b3JlLmNvbW1pdCgndXBkYXRlVHVydGxlQ29kZScsIGUudGFyZ2V0LnJlc3VsdCkKICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSkKICAgICAgICB9LAogICAgICAgIGdldFZhcmlhYmxlczogZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAgICAgdmFyIHZhcmlhYmxlcyA9IFtdCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2YXIgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHJlc3VsdHNbMF0pCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlbnRyaWVzKQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzLnB1c2goZW50cmllc1tpXVswXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMKICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpCiAgICAgICAgICAgIH0gCiAgICAgICAgfSwKICAgICAgICBnZXRSb3dzOiBmdW5jdGlvbiAocmVzdWx0cykgewogICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKQogICAgICAgIH0KICAgIH0sCiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVDdXJyZW50TGFuZ3VhZ2UnLCB0aGlzLmxhbmd1YWdlKQogICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgcmRmc3RvcmVTaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnJkZnN0b3JlLnNpemUKICAgICAgICB9CiAgICB9Cn0K"},{"version":3,"sources":["RDF-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RDF-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n    <Multipane class=\"vertical-panes\" layout=\"vertical\">\n        <div class=\"pane\" >\n            <CodeEditor :language=\"language\" \n            ref=\"codeEditor\" \n            @sendCode=\"code = $event\" />\n            <input type=\"file\" @change=\"loadTextFromFile\">\n            <p v-show=\"rdfstoreSize > 0\"> Loaded triples: {{ rdfstoreSize }} </p>\n            <Buttons :language=\"language\"\n                @buttonClicked=\"buttonClicked\" /> \n            <Output />\n        </div>\n        <MultipaneResizer></MultipaneResizer>\n        <div class=\"pane\" >\n            <SPARQLEditor :rdfsparql=\"rdfsparql\"/>\n        </div>\n    </Multipane>        \n    <grid :cols=\"getVariables(this.$store.getters.storeQueryResult)\" :rows=\"getRows(this.$store.getters.storeQueryResult)\" \n          :auto-width=\"autoWidth\"\n          :language=\"{}\"\n          :pagination=\"pagination\"\n          :search=\"search\"\n          :sort=\"sort\"\n          :width=\"width\"\n          v-if=\"this.$store.getters.storeQueryResult!=''\">\n    </grid>\n</div>\n</template>\n<script>\nimport CodeEditor from './Code-Editor.vue'\nimport Buttons from './Buttons.vue' \nimport Output from './Output.vue'\nimport store from '@/store.js'\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\nimport SPARQLEditor from './SPARQL-Editor.vue'\nimport Grid from 'gridjs-vue'\n\n// const N3 = require('n3');\n\n// function parseTurtle(code) {\n//     // const parser = new N3.Parser();\n//     // parser.parse(code, \n//     //     (error, quad, prefixes) => {\n//     //         if (error) {\n//     //             store.commit('changeError', true)\n//     //             store.commit('updateErrorMessage', error)\n//     //             return error \n//     //         } else if (prefixes) {\n//     //             var entries = Object.entries(prefixes)\n//     //             console.log(entries)\n//     //             for (var i = 0; i < entries.length; i++) {\n//     //                 store.commit('addPrefix', entries[i])\n//     //             }\n//     //         } else {\n//     //             store.commit('populateRDFStore', quad)\n//     //         }\n//     //     })\n//     store.\n// }\n\nexport default {\n    name: 'RDFEditor',\n    components: {\n        Multipane,\n        MultipaneResizer, \n        CodeEditor,\n        Buttons,\n        Output,\n        SPARQLEditor,\n        Grid\n    },\n    store: store, \n    data () {\n        return {\n            language: 'turtle', \n            parsedRDF: '' ,\n            rdfsparql: true, \n            autoWidth: true,\n            pagination: true,\n            search: true,\n            sort: true,\n            theme: 'mermaid',\n            width: '100%',\n        }\n    },\n    methods: {\n        buttonClicked (button) {\n            switch (button) { \n                case \"Clear\":\n                    this.$refs.codeEditor.clearEditor(); \n                    break; \n                case \"Load\":\n                    try {\n                        this.$store.commit('clearTurtleStore')\n                        // parseTurtle(this.$store.getters.turtleCode)\n                        this.$store.commit('loadRDF')\n                        this.$store.commit('changeError', false)\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    break;\n            }\n        },\n        loadTextFromFile: function (ev) {\n            const file = ev.target.files[0];\n            const reader = new FileReader();\n            reader.onload = e => this.$store.commit('updateTurtleCode', e.target.result)\n            reader.readAsText(file)\n        },\n        getVariables: function (results) {\n            var variables = []\n            try {\n                var entries = Object.entries(results[0])\n                console.log(entries)\n                for (var i = 0; i < entries.length; i++) {\n                    variables.push(entries[i][0])\n                }\n                return variables\n            } catch (err) {\n                console.log(err)\n            } \n        },\n        getRows: function (results) {\n            console.log(results)\n        }\n    },\n    mounted: function () {\n        this.$store.commit('updateCurrentLanguage', this.language)\n    },\n    computed: {\n        rdfstoreSize: function () {\n            return this.$store.getters.rdfstore.size\n        }\n    }\n}\n</script>\n<style >\ndiv {\n    line-height: 1.5; \n}\n.vertical-panes {\n  width: 100%;\n  height: 400px;\n  border: 1px solid #ccc;\n}\n.vertical-panes > .pane {\n    width: 50%; \n    text-align: left;\n    padding: 15px;\n    overflow: hidden;\n    background: #eee;\n}\n.vertical-panes > .pane ~ .pane {\n  border-left: 1px solid #ccc;\n}\n</style>"]}]}