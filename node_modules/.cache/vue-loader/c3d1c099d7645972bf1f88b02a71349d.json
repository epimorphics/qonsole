{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole/src/components/Code-Editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole/src/components/Code-Editor.vue","mtime":1593532643786},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGNvZGVtaXJyb3IgfSBmcm9tICd2dWUtY29kZW1pcnJvcicKaW1wb3J0ICdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcycKaW1wb3J0ICdjb2RlbWlycm9yL21vZGUvc3BhcnFsL3NwYXJxbC5qcycKaW1wb3J0ICdjb2RlbWlycm9yL21vZGUvdHVydGxlL3R1cnRsZS5qcycKaW1wb3J0ICdjb2RlbWlycm9yL3RoZW1lL2Jhc2UxNi1saWdodC5jc3MnCmltcG9ydCBzdG9yZSBmcm9tICdAL3N0b3JlLmpzJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ0NvZGVFZGl0b3InLAogICAgY29tcG9uZW50czogewogICAgICAgIGNvZGVtaXJyb3IKICAgIH0sCiAgICAvLyBHZXQgbGFuZ3VhZ2UgbW9kZSBmcm9tIHBhcmVudCBhbmQgY2hhbmdlIHRoZSBtb2RlIG9mIENvZGUgTWlycm9yIGFjY29yZGluZ2x5IAogICAgcHJvcHM6IFsnbGFuZ3VhZ2UnXSwgCiAgICBzdG9yZTogc3RvcmUsIAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjb2RlIDogJycsIAogICAgICAgICAgICBjbU9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIC8vIENvZGUgTWlycm9yIG9wdGlvbnMgCiAgICAgICAgICAgICAgICB0YWJTaXplOiA0LAogICAgICAgICAgICAgICAgbW9kZTogdGhpcy5sYW5ndWFnZSwKICAgICAgICAgICAgICAgIHRoZW1lOiAnYmFzZTE2LWxpZ2h0JywKICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiB0cnVlLAogICAgICAgICAgICAgICAgbGluZTogdHJ1ZQogICAgICAgICAgICB9LCAKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIG9uQ21SZWFkeShjbSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygndGhlIGVkaXRvciBpcyByZWFkaWVkIScsIGNtKQogICAgICAgIH0sCiAgICAgICAgb25DbUZvY3VzKGNtKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGUgZWRpdG9yIGlzIGZvY3VzZWQhJywgY20pCiAgICAgICAgfSwKICAgICAgICBvbkNtQ29kZUNoYW5nZShuZXdDb2RlKSB7CiAgICAgICAgICAgIC8vIFdyaXRlIGluIGNvbnNvbGUgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcyAKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMgaXMgbmV3IGNvZGUnLCBuZXdDb2RlKQogICAgICAgICAgICBzd2l0Y2ggKHRoaXMubGFuZ3VhZ2UpewogICAgICAgICAgICAgICAgY2FzZSAidHVydGxlIjoKICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VwZGF0ZVR1cnRsZUNvZGUnLCBuZXdDb2RlKQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyAKICAgICAgICAgICAgICAgIGNhc2UgInNwYXJxbCI6CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVTUEFSUUxDb2RlJywgbmV3Q29kZSkKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyB0aGlzLmNvZGUgPSBuZXdDb2RlCiAgICAgICAgfSwKICAgICAgICBjbGVhckVkaXRvcigpIHsKICAgICAgICAgICAgdGhpcy5jb2RlID0gJycgCiAgICAgICAgfSwKICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIGNvZGVtaXJyb3IoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRyZWZzLmNtRWRpdG9yLmNvZGVtaXJyb3IKICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICBjb25zb2xlLmxvZygndGhlIGN1cnJlbnQgQ29kZU1pcnJvciBpbnN0YW5jZSBvYmplY3Q6JywgdGhpcy5jb2RlbWlycm9yKQogICAgICAgIC8vIHlvdSBjYW4gdXNlIHRoaXMuY29kZW1pcnJvciB0byBkbyBzb21ldGhpbmcuLi4KICAgICAgICBzd2l0Y2ggKHRoaXMubGFuZ3VhZ2UpIHsKICAgICAgICAgICAgY2FzZSAic3BhcnFsIjoKICAgICAgICAgICAgICAgIHRoaXMuY29kZSA9IHRoaXMuJHN0b3JlLmdldHRlcnMuU1BBUlFMQ29kZQogICAgICAgICAgICAgICAgYnJlYWs7IAogICAgICAgICAgICBjYXNlICJ0dXJ0bGUiOgogICAgICAgICAgICAgICAgdGhpcy5jb2RlID0gdGhpcy4kc3RvcmUuZ2V0dGVycy50dXJ0bGVDb2RlIAogICAgICAgIH0KICAgIH0KfQoK"},{"version":3,"sources":["Code-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Code-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <codemirror\n            ref=\"cmEditor\"\n            :value=\"code\"\n            :options=\"cmOptions\"\n            @ready=\"onCmReady\"\n            @focus=\"onCmFocus\"\n            @input=\"onCmCodeChange\"\n        />\n    </div>\n</template>\n<script>\nimport { codemirror } from 'vue-codemirror'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/mode/sparql/sparql.js'\nimport 'codemirror/mode/turtle/turtle.js'\nimport 'codemirror/theme/base16-light.css'\nimport store from '@/store.js'\n\nexport default {\n    name: 'CodeEditor',\n    components: {\n        codemirror\n    },\n    // Get language mode from parent and change the mode of Code Mirror accordingly \n    props: ['language'], \n    store: store, \n    data() {\n        return {\n            code : '', \n            cmOptions: {\n                // Code Mirror options \n                tabSize: 4,\n                mode: this.language,\n                theme: 'base16-light',\n                lineNumbers: true,\n                line: true\n            }, \n        }\n    },\n    methods: {\n        onCmReady(cm) {\n            console.log('the editor is readied!', cm)\n        },\n        onCmFocus(cm) {\n            console.log('the editor is focused!', cm)\n        },\n        onCmCodeChange(newCode) {\n            // Write in console for debugging purposes \n            // console.log('this is new code', newCode)\n            switch (this.language){\n                case \"turtle\":\n                    this.$store.commit('updateTurtleCode', newCode)\n                    break; \n                case \"sparql\":\n                    this.$store.commit('updateSPARQLCode', newCode)\n            }\n            // this.code = newCode\n        },\n        clearEditor() {\n            this.code = '' \n        },\n    },\n    computed: {\n        codemirror() {\n            return this.$refs.cmEditor.codemirror\n        }\n    },\n    mounted() {\n        console.log('the current CodeMirror instance object:', this.codemirror)\n        // you can use this.codemirror to do something...\n        switch (this.language) {\n            case \"sparql\":\n                this.code = this.$store.getters.SPARQLCode\n                break; \n            case \"turtle\":\n                this.code = this.$store.getters.turtleCode \n        }\n    }\n}\n\n</script>\n"]}]}