{"remainingRequest":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anhelka/Documents/epimorphics/qonsole2.0/src/components/Code-Editor.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/src/components/Code-Editor.vue","mtime":1592837132694},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anhelka/Documents/epimorphics/qonsole2.0/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJ2NvZGVtaXJyb3IvdGhlbWUvYmFzZTE2LWxpZ2h0LmNzcyc7IAo="},{"version":3,"sources":["Code-Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA","file":"Code-Editor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <codemirror\n            ref=\"cmEditor\"\n            :value=\"code\"\n            :options=\"cmOptions\"\n            @ready=\"onCmReady\"\n            @focus=\"onCmFocus\"\n            @input=\"onCmCodeChange\"\n        />\n    </div>\n</template>\n<script>\n// Import codemirror scripts \nimport { codemirror } from 'vue-codemirror'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/mode/sparql/sparql.js'\nimport 'codemirror/mode/turtle/turtle.js'\n\nexport default {\n    name: 'CodeEditor',\n    components: {\n        codemirror\n    },\n    // Get language mode from parent and change the mode of Code Mirror accordingly \n    props: ['language'], \n    data() {\n        return {\n            code : '', \n            cmOptions: {\n                // Code Mirror options \n                tabSize: 4,\n                mode: this.language,\n                theme: 'base16-light',\n                lineNumbers: true,\n                line: true\n            }, \n        }\n    },\n    methods: {\n        onCmReady(cm) {\n            console.log('the editor is readied!', cm)\n        },\n        onCmFocus(cm) {\n            console.log('the editor is focused!', cm)\n        },\n        onCmCodeChange(newCode) {\n            // Write in console for debugging purposes \n            // console.log('this is new code', newCode)\n            this.code = newCode\n        },\n        clearEditor() {\n            this.code = '' \n        },\n        sendContent() {\n            this.$emit('sendCode', this.code)\n        }\n    },\n    computed: {\n        codemirror() {\n            return this.$refs.cmEditor.codemirror\n        }\n    },\n    mounted() {\n        console.log('the current CodeMirror instance object:', this.codemirror)\n        // you can use this.codemirror to do something...\n        switch (this.language) {\n            case \"sparql\":\n                this.code = 'PREFIX foaf: <http://xmlns.com/foaf/0.1/> ';\n                break; \n            case \"turtle\":\n                this.code = '@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .'\n        }\n    }\n}\n\n</script>\n\n<style>\n@import 'codemirror/theme/base16-light.css'; \n</style>"]}]}